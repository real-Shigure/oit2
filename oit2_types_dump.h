/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'oit2'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct C_SDK::Classes::CVerifiedUserCmd;
struct OneTap::Structs::Animation::Data;
struct C_SDK::Classes::Math::Matrix3x4;
struct C_SDK::Classes::EngineTrace::Ray;
struct C_SDK::Classes::EngineTrace::Trace;
struct C_SDK::Classes::EngineTrace::VirtTable;
struct C_SDK::Classes::EngineTrace;
struct C_SDK::Classes::Math::VirtualMatrix;
struct C_SDK::Classes::INetChannelInfo::VirtTable;
struct C_SDK::Classes::INetChannelInfo;
struct C_SDK::Classes::EngineClient::VirtTable;
struct C_SDK::Classes::Player::Info;
struct C_SDK::Classes::EngineClient;
struct C_SDK::Classes::ICVar;

/* 1 */
enum __TI_flags
{
  TI_IsConst = 0x1,
  TI_IsVolatile = 0x2,
  TI_IsUnaligned = 0x4,
  TI_IsPure = 0x8,
  TI_IsWinRT = 0x10,
};

/* 2 */
enum __CT_flags
{
  CT_IsSimpleType = 0x1,
  CT_ByReferenceOnly = 0x2,
  CT_HasVirtualBase = 0x4,
  CT_IsWinRTHandle = 0x8,
  CT_IsStdBadAlloc = 0x10,
};

/* 3 */
struct FuncInfo
{
  int magicNumber;
  int maxState;
  void *pUnwindMap;
  int nTryBlocks;
  void *pTryBlockMap;
  int nIPMapEntries;
  void *pIPtoStateMap;
  void *pESTypeList;
  int EHFlags;
};

/* 4 */
struct UnwindMapEntry
{
  int toState;
  void *action;
};

/* 5 */
struct TryBlockMapEntry
{
  int tryLow;
  int tryHigh;
  int catchHigh;
  int nCatches;
  void *pHandlerArray;
};

/* 6 */
struct HandlerType
{
  int adjectives;
  void *pType;
  int dispCatchObj;
  void *addressOfHandler;
};

/* 7 */
typedef void **va_list;

/* 8 */
typedef int BOOL;

/* 9 */
union __declspec(align(8)) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 10 */
union __declspec(align(16)) __m128
{
  float clamp;
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 11 */
struct __m128d
{
  double m128d_f64[2];
};

/* 12 */
union __declspec(align(16)) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  float rate;
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  float m128i_u32;
  unsigned __int64 m128i_u64[2];
};

/* 13 */
union __declspec(align(32)) __m256
{
  float m256_f32[8];
};

/* 14 */
union __declspec(align(32)) __m256d
{
  double m256d_f64[4];
};

/* 15 */
union __declspec(align(32)) __m256i
{
  __int8 m256i_i8[32];
  __int16 m256i_i16[16];
  __int32 m256i_i32[8];
  __int64 m256i_i64[4];
  unsigned __int8 m256i_u8[32];
  unsigned __int16 m256i_u16[16];
  unsigned __int32 m256i_u32[8];
  unsigned __int64 m256i_u64[4];
};

/* 19 */
struct __unaligned __declspec(align(1)) C_SDK::Classes::GuiManager::DrawColor
{
  char red;
  char green;
  char blue;
  int alpha;
};

/* 20 */
struct __declspec(align(4)) C_SDK::Classes::CGlobalVarsBase
{
  float m_realTime;
  float m_frameCount;
  float m_absoluteFrameTime;
  float m_absoluteFrameStartTimeSTDdev;
  float m_curTime;
  float m_frameTime;
  int m_maxClients;
  int m_tickCount;
  float m_intervalPerTick;
  float m_interpolationAmount;
  int m_simTicksThisFrame;
  int m_networkProtocol;
  void *m_saveData;
  bool m_isClient;
  bool m_isRemoteClient;
  int m_timestampNetworkingBase;
  int m_timestampRandomizeWindow;
  const char *m_mapName;
  const char *m_mapGroupName;
  int m_mapVersion;
  const char *m_startSpot;
  int m_loadType;
  bool m_isMapLoadFailed;
  bool m_isDeathmatch;
  bool m_isCoop;
  bool m_isTeamPlay;
  int m_maxEntities;
  int m_serverCount;
  void *m_edicts;
};

/* 33 */
struct C_SDK::Classes::Math::Vector::Rectangular
{
  float m_x;
  float m_y;
  float m_z;
};

/* 22 */
struct __declspec(align(4)) C_SDK::Classes::CAnimState
{
  char pad_0x0000[24];
  float anim_update_timer;
  char pad_0x001C[12];
  float started_moving_time;
  float last_move_time;
  char pad_0x0030[16];
  float last_lby_time;
  char pad_0x0044[8];
  float run_amount;
  char pad_0x0050[16];
  void *entity;
  __int32 active_weapon;
  __int32 last_active_weapon;
  float last_client_side_animation_update_time;
  __int32 last_client_side_animation_update_framecount;
  float m_eyeTimer;
  float eye_angles_y;
  float eye_angles_x;
  float m_goalFeetYaw;
  float m_currentFeetYaw;
  float torso_yaw;
  float last_move_yaw;
  float lean_amount;
  char pad_0x0094[4];
  float feet_cycle;
  float feet_yaw_rate;
  char pad_0x00A0[4];
  float duck_amount;
  float landing_duck_amount;
  char pad_0x00AC[4];
  C_SDK::Classes::Math::Vector::Rectangular current_origin;
  C_SDK::Classes::Math::Vector::Rectangular last_origin;
  float velocity_x;
  float velocity_y;
  char pad_0x00D0[16];
  float move_direction_1;
  float move_direction_2;
  char pad_0x00E8[4];
  float m_velocity;
  float jump_fall_velocity;
  float clamped_velocity;
  float feet_speed_forwards_or_sideways;
  float feet_speed_unknown_forwards_or_sideways;
  float last_time_started_moving;
  float last_time_stopped_moving;
  bool m_onGround;
  bool m_hitInGroundAnimation;
  char pad_0x0110[4];
  float last_origin_z;
  float head_from_ground_distance_standing;
  float stop_to_full_running_fraction;
  char pad_0x0120[20];
  __int32 is_not_moving;
  char pad_0x0138[32];
  float last_anim_update_time;
  float moving_direction_x;
  float moving_direction_y;
  float moving_direction_z;
  char pad_0x0168[68];
  __int32 started_moving;
  char pad_0x01B0[8];
  float lean_yaw;
  char pad_0x01BC[8];
  float poses_speed;
  char pad_0x01C8[8];
  float ladder_speed;
  char pad_0x01D4[8];
  float ladder_yaw;
  char pad_0x01E0[8];
  float some_pose;
  char pad_0x01EC[20];
  float body_yaw;
  char pad_0x0204[8];
  float body_pitch;
  char pad_0x0210[8];
  float death_yaw;
  char pad_0x021C[8];
  float stand;
  char pad_0x0228[8];
  float jump_fall;
  char pad_0x0234[8];
  float aim_blend_stand_idle;
  char pad_0x0240[8];
  float aim_blend_crouch_idle;
  char pad_0x024C[8];
  float strafe_yaw;
  char pad_0x0258[8];
  float aim_blend_stand_walk;
  char pad_0x0264[8];
  float aim_blend_stand_run;
  char pad_0x0270[8];
  float aim_blend_crouch_walk;
  char pad_0x027C[8];
  float move_blend_walk;
  char pad_0x0288[8];
  float move_blend_run;
  char pad_0x0294[8];
  float move_blend_crouch;
  char pad_0x02A0[4];
  float speed;
  __int32 moving_in_any_direction;
  float acceleration;
  char pad_0x02B0[116];
  float crouch_height;
  __int32 is_full_crouched;
  char pad_0x032C[4];
  float velocity_subtract_x;
  float velocity_subtract_y;
  float velocity_subtract_z;
  float standing_head_height;
  char pad_0x0340[4];
};

/* 23 */
struct C_SDK::Structs::GlowObjectDefinition
{
  void *m_entity;
  char m_glowVector[12];
  float m_alpha;
  unsigned __int8 pad_0014[4];
  float m_unk;
  char pad_001C[4];
  float m_unk2;
  bool m_renderWhenOccluded;
  bool m_renderWhenUnoccluded;
  bool m_fullBloomRender;
  char pad_0027[5];
  int m_glowStyle;
  int m_splitScreenSlot;
  int m_nextFreeSlot;
};

/* 24 */
struct C_SDK::Classes::CPrediction
{
  char pad_0x0000[8];
  bool m_inPrediction;
  char pad_0x0009[1];
  bool m_enginePaused;
  char pad_0x000B[12];
  bool m_firstTime;
};

/* 25 */
struct __declspec(align(4)) C_SDK::Classes::CUserCmd
{
  char m_virtualDeconstructor[4];
  int m_commandNumber;
  int m_tickCount;
  C_SDK::Classes::Math::Vector::Rectangular m_viewAngles;
  C_SDK::Classes::Math::Vector::Rectangular m_aimDirection;
  float m_forwardMove;
  float m_sideMove;
  float m_upMove;
  int m_buttons;
  int m_impulse;
  int m_weaponSelect;
  int m_weaponSubType;
  int m_randomSeed;
  __int16 m_mouseX;
  __int16 m_mouseY;
  bool m_hasBeenPredicted;
  C_SDK::Classes::Math::Vector::Rectangular m_headAngles;
  C_SDK::Classes::Math::Vector::Rectangular m_headOffset;
};

/* 26 */
struct C_SDK::Classes::CInput
{
  char m_chillOut[4];
  bool m_trackIRAvailable;
  bool m_mouseInitialized;
  bool m_joystickAdvancedInit;
  char pad_0x08[45];
  void *m_keys;
  char pad_0x38[92];
  int pad_0x41;
  int pad_0x42;
  bool m_cameraInterceptingMouse;
  bool m_cameraInThirdPerson;
  bool m_cameraMovingWithMouse;
  char m_unk;
  char m_cameraOffset[12];
  bool m_cameraDistanceMove;
  char m_unk2[3];
  int m_cameraOldX;
  int m_cameraOldY;
  int m_cameraX;
  int m_cameraY;
  bool m_cameraIsOrthographic;
  char m_unk3[3];
  char m_angPreviousViewAngles[12];
  char m_angPreviousViewAnglesTilt[12];
  float m_lastForwardMove;
  int m_clearInputState;
  char pad_0xE4[8];
  void *m_commands;
  void *m_verifiedCommands;
};

/* 28 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 40 */
typedef unsigned int DWORD;

/* 29 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 30 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 31 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 32 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 34 */
struct C_SDK::Classes::CBasePlayerAnimState
{
  _BYTE m_leftDormancy;
  _BYTE gap1[95];
  void *m_data;
  void *m_activeWeapon;
  void *m_lastActiveWeapon;
  float m_lastUpdateTime;
  int m_lastUpdateFrame;
  float m_lastUpdateIncrement;
  float m_eyeYaw;
  float m_eyePitch;
  float m_goalFeetYaw;
  float m_lastFeetYaw;
  float m_moveYaw;
  float m_lastMoveYaw;
  float m_leanAmount;
  byte pad1[4];
  _BYTE gap98[4];
  float m_moveWeight;
  float m_moveWeightSmoothed;
  float m_duckAmount;
  float m_hitGroundCycle;
  float m_recrouchWeight;
  char m_origin[12];
  char m_lastOrigin[12];
  char m_velocity[12];
  char m_velocityNormalized[12];
  char m_velocityNormalizedNonZero[12];
  float m_velocityLenght2D;
  float m_jumpFallVelocity;
  float m_speedNormalized;
  float m_runningSpeed;
  float m_duckingSpeed;
  float m_durationMoving;
  float m_durationStill;
  bool m_onGround;
  bool m_hitGroundAnimation;
  byte pad2[2];
  float m_nextLowerBodyYawUpdateTime;
  float m_durationInAir;
  float m_leftGroundHeight;
  float m_hitGroundWeight;
  float m_walkToRunTransition;
  byte pad3[4];
  float m_affectedFraction;
  byte pad4[520];
  float m_minBodyYaw;
  float m_maxBodyYaw;
  OneTap::Structs::Animation::Data *m_feetYawRate;
  float m_feetCycle;
  float m_animsetVersion;
};

/* 64 */
struct __declspec(align(4)) OneTap::Structs::Animation::Data
{
  _BYTE gap0[112];
  _BYTE isAnimationUpdateRequest;
  _DWORD dword74;
  _DWORD dword78;
  _DWORD dword7C;
  _BYTE gap80[12];
  _DWORD dword8C;
  _BYTE gap90[740];
  float m_absYaw_0_;
  float m_absYaw_1_;
};

/* 113 */
enum C_SDK::Classes::Animation::Activity
{
  ACT_INVALID = 0xFFFFFFFF,
  ACT_RESET = 0x0,
  ACT_IDLE = 0x1,
  ACT_TRANSITION = 0x2,
  ACT_COVER = 0x3,
  ACT_COVER_MED = 0x4,
  ACT_COVER_LOW = 0x5,
  ACT_WALK = 0x6,
  ACT_WALK_AIM = 0x7,
  ACT_WALK_CROUCH = 0x8,
  ACT_WALK_CROUCH_AIM = 0x9,
  ACT_RUN = 0xA,
  ACT_RUN_AIM = 0xB,
  ACT_RUN_CROUCH = 0xC,
  ACT_RUN_CROUCH_AIM = 0xD,
  ACT_RUN_PROTECTED = 0xE,
  ACT_SCRIPT_CUSTOM_MOVE = 0xF,
  ACT_RANGE_ATTACK1 = 0x10,
  ACT_RANGE_ATTACK2 = 0x11,
  ACT_RANGE_ATTACK1_LOW = 0x12,
  ACT_RANGE_ATTACK2_LOW = 0x13,
  ACT_DIESIMPLE = 0x14,
  ACT_DIEBACKWARD = 0x15,
  ACT_DIEFORWARD = 0x16,
  ACT_DIEVIOLENT = 0x17,
  ACT_DIERAGDOLL = 0x18,
  ACT_FLY = 0x19,
  ACT_HOVER = 0x1A,
  ACT_GLIDE = 0x1B,
  ACT_SWIM = 0x1C,
  ACT_JUMP = 0x1D,
  ACT_HOP = 0x1E,
  ACT_LEAP = 0x1F,
  ACT_LAND = 0x20,
  ACT_CLIMB_UP = 0x21,
  ACT_CLIMB_DOWN = 0x22,
  ACT_CLIMB_DISMOUNT = 0x23,
  ACT_SHIPLADDER_UP = 0x24,
  ACT_SHIPLADDER_DOWN = 0x25,
  ACT_STRAFE_LEFT = 0x26,
  ACT_STRAFE_RIGHT = 0x27,
  ACT_ROLL_LEFT = 0x28,
  ACT_ROLL_RIGHT = 0x29,
  ACT_TURN_LEFT = 0x2A,
  ACT_TURN_RIGHT = 0x2B,
  ACT_CROUCH = 0x2C,
  ACT_CROUCHIDLE = 0x2D,
  ACT_STAND = 0x2E,
  ACT_USE = 0x2F,
  ACT_ALIEN_BURROW_IDLE = 0x30,
  ACT_ALIEN_BURROW_OUT = 0x31,
  ACT_SIGNAL1 = 0x32,
  ACT_SIGNAL2 = 0x33,
  ACT_SIGNAL3 = 0x34,
  ACT_SIGNAL_ADVANCE = 0x35,
  ACT_SIGNAL_FORWARD = 0x36,
  ACT_SIGNAL_GROUP = 0x37,
  ACT_SIGNAL_HALT = 0x38,
  ACT_SIGNAL_LEFT = 0x39,
  ACT_SIGNAL_RIGHT = 0x3A,
  ACT_SIGNAL_TAKECOVER = 0x3B,
  ACT_LOOKBACK_RIGHT = 0x3C,
  ACT_LOOKBACK_LEFT = 0x3D,
  ACT_COWER = 0x3E,
  ACT_SMALL_FLINCH = 0x3F,
  ACT_BIG_FLINCH = 0x40,
  ACT_MELEE_ATTACK1 = 0x41,
  ACT_MELEE_ATTACK2 = 0x42,
  ACT_RELOAD = 0x43,
  ACT_RELOAD_START = 0x44,
  ACT_RELOAD_FINISH = 0x45,
  ACT_RELOAD_LOW = 0x46,
  ACT_ARM = 0x47,
  ACT_DISARM = 0x48,
  ACT_DROP_WEAPON = 0x49,
  ACT_DROP_WEAPON_SHOTGUN = 0x4A,
  ACT_PICKUP_GROUND = 0x4B,
  ACT_PICKUP_RACK = 0x4C,
  ACT_IDLE_ANGRY = 0x4D,
  ACT_IDLE_RELAXED = 0x4E,
  ACT_IDLE_STIMULATED = 0x4F,
  ACT_IDLE_AGITATED = 0x50,
  ACT_IDLE_STEALTH = 0x51,
  ACT_IDLE_HURT = 0x52,
  ACT_WALK_RELAXED = 0x53,
  ACT_WALK_STIMULATED = 0x54,
  ACT_WALK_AGITATED = 0x55,
  ACT_WALK_STEALTH = 0x56,
  ACT_RUN_RELAXED = 0x57,
  ACT_RUN_STIMULATED = 0x58,
  ACT_RUN_AGITATED = 0x59,
  ACT_RUN_STEALTH = 0x5A,
  ACT_IDLE_AIM_RELAXED = 0x5B,
  ACT_IDLE_AIM_STIMULATED = 0x5C,
  ACT_IDLE_AIM_AGITATED = 0x5D,
  ACT_IDLE_AIM_STEALTH = 0x5E,
  ACT_WALK_AIM_RELAXED = 0x5F,
  ACT_WALK_AIM_STIMULATED = 0x60,
  ACT_WALK_AIM_AGITATED = 0x61,
  ACT_WALK_AIM_STEALTH = 0x62,
  ACT_RUN_AIM_RELAXED = 0x63,
  ACT_RUN_AIM_STIMULATED = 0x64,
  ACT_RUN_AIM_AGITATED = 0x65,
  ACT_RUN_AIM_STEALTH = 0x66,
  ACT_CROUCHIDLE_STIMULATED = 0x67,
  ACT_CROUCHIDLE_AIM_STIMULATED = 0x68,
  ACT_CROUCHIDLE_AGITATED = 0x69,
  ACT_WALK_HURT = 0x6A,
  ACT_RUN_HURT = 0x6B,
  ACT_SPECIAL_ATTACK1 = 0x6C,
  ACT_SPECIAL_ATTACK2 = 0x6D,
  ACT_COMBAT_IDLE = 0x6E,
  ACT_WALK_SCARED = 0x6F,
  ACT_RUN_SCARED = 0x70,
  ACT_VICTORY_DANCE = 0x71,
  ACT_DIE_HEADSHOT = 0x72,
  ACT_DIE_CHESTSHOT = 0x73,
  ACT_DIE_GUTSHOT = 0x74,
  ACT_DIE_BACKSHOT = 0x75,
  ACT_FLINCH_HEAD = 0x76,
  ACT_FLINCH_CHEST = 0x77,
  ACT_FLINCH_STOMACH = 0x78,
  ACT_FLINCH_LEFTARM = 0x79,
  ACT_FLINCH_RIGHTARM = 0x7A,
  ACT_FLINCH_LEFTLEG = 0x7B,
  ACT_FLINCH_RIGHTLEG = 0x7C,
  ACT_FLINCH_PHYSICS = 0x7D,
  ACT_FLINCH_HEAD_BACK = 0x7E,
  ACT_FLINCH_HEAD_LEFT = 0x7F,
  ACT_FLINCH_HEAD_RIGHT = 0x80,
  ACT_FLINCH_CHEST_BACK = 0x81,
  ACT_FLINCH_STOMACH_BACK = 0x82,
  ACT_FLINCH_CROUCH_FRONT = 0x83,
  ACT_FLINCH_CROUCH_BACK = 0x84,
  ACT_FLINCH_CROUCH_LEFT = 0x85,
  ACT_FLINCH_CROUCH_RIGHT = 0x86,
  ACT_IDLE_ON_FIRE = 0x87,
  ACT_WALK_ON_FIRE = 0x88,
  ACT_RUN_ON_FIRE = 0x89,
  ACT_RAPPEL_LOOP = 0x8A,
  ACT_180_LEFT = 0x8B,
  ACT_180_RIGHT = 0x8C,
  ACT_90_LEFT = 0x8D,
  ACT_90_RIGHT = 0x8E,
  ACT_STEP_LEFT = 0x8F,
  ACT_STEP_RIGHT = 0x90,
  ACT_STEP_BACK = 0x91,
  ACT_STEP_FORE = 0x92,
  ACT_GESTURE_RANGE_ATTACK1 = 0x93,
  ACT_GESTURE_RANGE_ATTACK2 = 0x94,
  ACT_GESTURE_MELEE_ATTACK1 = 0x95,
  ACT_GESTURE_MELEE_ATTACK2 = 0x96,
  ACT_GESTURE_RANGE_ATTACK1_LOW = 0x97,
  ACT_GESTURE_RANGE_ATTACK2_LOW = 0x98,
  ACT_MELEE_ATTACK_SWING_GESTURE = 0x99,
  ACT_GESTURE_SMALL_FLINCH = 0x9A,
  ACT_GESTURE_BIG_FLINCH = 0x9B,
  ACT_GESTURE_FLINCH_BLAST = 0x9C,
  ACT_GESTURE_FLINCH_BLAST_SHOTGUN = 0x9D,
  ACT_GESTURE_FLINCH_BLAST_DAMAGED = 0x9E,
  ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN = 0x9F,
  ACT_GESTURE_FLINCH_HEAD = 0xA0,
  ACT_GESTURE_FLINCH_CHEST = 0xA1,
  ACT_GESTURE_FLINCH_STOMACH = 0xA2,
  ACT_GESTURE_FLINCH_LEFTARM = 0xA3,
  ACT_GESTURE_FLINCH_RIGHTARM = 0xA4,
  ACT_GESTURE_FLINCH_LEFTLEG = 0xA5,
  ACT_GESTURE_FLINCH_RIGHTLEG = 0xA6,
  ACT_GESTURE_TURN_LEFT = 0xA7,
  ACT_GESTURE_TURN_RIGHT = 0xA8,
  ACT_GESTURE_TURN_LEFT45 = 0xA9,
  ACT_GESTURE_TURN_RIGHT45 = 0xAA,
  ACT_GESTURE_TURN_LEFT90 = 0xAB,
  ACT_GESTURE_TURN_RIGHT90 = 0xAC,
  ACT_GESTURE_TURN_LEFT45_FLAT = 0xAD,
  ACT_GESTURE_TURN_RIGHT45_FLAT = 0xAE,
  ACT_GESTURE_TURN_LEFT90_FLAT = 0xAF,
  ACT_GESTURE_TURN_RIGHT90_FLAT = 0xB0,
  ACT_BARNACLE_HIT = 0xB1,
  ACT_BARNACLE_PULL = 0xB2,
  ACT_BARNACLE_CHOMP = 0xB3,
  ACT_BARNACLE_CHEW = 0xB4,
  ACT_DO_NOT_DISTURB = 0xB5,
  ACT_SPECIFIC_SEQUENCE = 0xB6,
  ACT_VM_DRAW = 0xB7,
  ACT_VM_HOLSTER = 0xB8,
  ACT_VM_IDLE = 0xB9,
  ACT_VM_FIDGET = 0xBA,
  ACT_VM_PULLBACK = 0xBB,
  ACT_VM_PULLBACK_HIGH = 0xBC,
  ACT_VM_PULLBACK_LOW = 0xBD,
  ACT_VM_THROW = 0xBE,
  ACT_VM_PULLPIN = 0xBF,
  ACT_VM_PRIMARYATTACK = 0xC0,
  ACT_VM_SECONDARYATTACK = 0xC1,
  ACT_VM_RELOAD = 0xC2,
  ACT_VM_DRYFIRE = 0xC3,
  ACT_VM_HITLEFT = 0xC4,
  ACT_VM_HITLEFT2 = 0xC5,
  ACT_VM_HITRIGHT = 0xC6,
  ACT_VM_HITRIGHT2 = 0xC7,
  ACT_VM_HITCENTER = 0xC8,
  ACT_VM_HITCENTER2 = 0xC9,
  ACT_VM_MISSLEFT = 0xCA,
  ACT_VM_MISSLEFT2 = 0xCB,
  ACT_VM_MISSRIGHT = 0xCC,
  ACT_VM_MISSRIGHT2 = 0xCD,
  ACT_VM_MISSCENTER = 0xCE,
  ACT_VM_MISSCENTER2 = 0xCF,
  ACT_VM_HAULBACK = 0xD0,
  ACT_VM_SWINGHARD = 0xD1,
  ACT_VM_SWINGMISS = 0xD2,
  ACT_VM_SWINGHIT = 0xD3,
  ACT_VM_IDLE_TO_LOWERED = 0xD4,
  ACT_VM_IDLE_LOWERED = 0xD5,
  ACT_VM_LOWERED_TO_IDLE = 0xD6,
  ACT_VM_RECOIL1 = 0xD7,
  ACT_VM_RECOIL2 = 0xD8,
  ACT_VM_RECOIL3 = 0xD9,
  ACT_VM_PICKUP = 0xDA,
  ACT_VM_RELEASE = 0xDB,
  ACT_VM_ATTACH_SILENCER = 0xDC,
  ACT_VM_DETACH_SILENCER = 0xDD,
  ACT_VM_EMPTY_FIRE = 0xDE,
  ACT_VM_EMPTY_RELOAD = 0xDF,
  ACT_VM_EMPTY_DRAW = 0xE0,
  ACT_VM_EMPTY_IDLE = 0xE1,
  ACT_SLAM_STICKWALL_IDLE = 0xE2,
  ACT_SLAM_STICKWALL_ND_IDLE = 0xE3,
  ACT_SLAM_STICKWALL_ATTACH = 0xE4,
  ACT_SLAM_STICKWALL_ATTACH2 = 0xE5,
  ACT_SLAM_STICKWALL_ND_ATTACH = 0xE6,
  ACT_SLAM_STICKWALL_ND_ATTACH2 = 0xE7,
  ACT_SLAM_STICKWALL_DETONATE = 0xE8,
  ACT_SLAM_STICKWALL_DETONATOR_HOLSTER = 0xE9,
  ACT_SLAM_STICKWALL_DRAW = 0xEA,
  ACT_SLAM_STICKWALL_ND_DRAW = 0xEB,
  ACT_SLAM_STICKWALL_TO_THROW = 0xEC,
  ACT_SLAM_STICKWALL_TO_THROW_ND = 0xED,
  ACT_SLAM_STICKWALL_TO_TRIPMINE_ND = 0xEE,
  ACT_SLAM_THROW_IDLE = 0xEF,
  ACT_SLAM_THROW_ND_IDLE = 0xF0,
  ACT_SLAM_THROW_THROW = 0xF1,
  ACT_SLAM_THROW_THROW2 = 0xF2,
  ACT_SLAM_THROW_THROW_ND = 0xF3,
  ACT_SLAM_THROW_THROW_ND2 = 0xF4,
  ACT_SLAM_THROW_DRAW = 0xF5,
  ACT_SLAM_THROW_ND_DRAW = 0xF6,
  ACT_SLAM_THROW_TO_STICKWALL = 0xF7,
  ACT_SLAM_THROW_TO_STICKWALL_ND = 0xF8,
  ACT_SLAM_THROW_DETONATE = 0xF9,
  ACT_SLAM_THROW_DETONATOR_HOLSTER = 0xFA,
  ACT_SLAM_THROW_TO_TRIPMINE_ND = 0xFB,
  ACT_SLAM_TRIPMINE_IDLE = 0xFC,
  ACT_SLAM_TRIPMINE_DRAW = 0xFD,
  ACT_SLAM_TRIPMINE_ATTACH = 0xFE,
  ACT_SLAM_TRIPMINE_ATTACH2 = 0xFF,
  ACT_SLAM_TRIPMINE_TO_STICKWALL_ND = 0x100,
  ACT_SLAM_TRIPMINE_TO_THROW_ND = 0x101,
  ACT_SLAM_DETONATOR_IDLE = 0x102,
  ACT_SLAM_DETONATOR_DRAW = 0x103,
  ACT_SLAM_DETONATOR_DETONATE = 0x104,
  ACT_SLAM_DETONATOR_HOLSTER = 0x105,
  ACT_SLAM_DETONATOR_STICKWALL_DRAW = 0x106,
  ACT_SLAM_DETONATOR_THROW_DRAW = 0x107,
  ACT_SHOTGUN_RELOAD_START = 0x108,
  ACT_SHOTGUN_RELOAD_FINISH = 0x109,
  ACT_SHOTGUN_PUMP = 0x10A,
  ACT_SMG2_IDLE2 = 0x10B,
  ACT_SMG2_FIRE2 = 0x10C,
  ACT_SMG2_DRAW2 = 0x10D,
  ACT_SMG2_RELOAD2 = 0x10E,
  ACT_SMG2_DRYFIRE2 = 0x10F,
  ACT_SMG2_TOAUTO = 0x110,
  ACT_SMG2_TOBURST = 0x111,
  ACT_PHYSCANNON_UPGRADE = 0x112,
  ACT_RANGE_ATTACK_AR1 = 0x113,
  ACT_RANGE_ATTACK_AR2 = 0x114,
  ACT_RANGE_ATTACK_AR2_LOW = 0x115,
  ACT_RANGE_ATTACK_AR2_GRENADE = 0x116,
  ACT_RANGE_ATTACK_HMG1 = 0x117,
  ACT_RANGE_ATTACK_ML = 0x118,
  ACT_RANGE_ATTACK_SMG1 = 0x119,
  ACT_RANGE_ATTACK_SMG1_LOW = 0x11A,
  ACT_RANGE_ATTACK_SMG2 = 0x11B,
  ACT_RANGE_ATTACK_SHOTGUN = 0x11C,
  ACT_RANGE_ATTACK_SHOTGUN_LOW = 0x11D,
  ACT_RANGE_ATTACK_PISTOL = 0x11E,
  ACT_RANGE_ATTACK_PISTOL_LOW = 0x11F,
  ACT_RANGE_ATTACK_SLAM = 0x120,
  ACT_RANGE_ATTACK_TRIPWIRE = 0x121,
  ACT_RANGE_ATTACK_THROW = 0x122,
  ACT_RANGE_ATTACK_SNIPER_RIFLE = 0x123,
  ACT_RANGE_ATTACK_RPG = 0x124,
  ACT_MELEE_ATTACK_SWING = 0x125,
  ACT_RANGE_AIM_LOW = 0x126,
  ACT_RANGE_AIM_SMG1_LOW = 0x127,
  ACT_RANGE_AIM_PISTOL_LOW = 0x128,
  ACT_RANGE_AIM_AR2_LOW = 0x129,
  ACT_COVER_PISTOL_LOW = 0x12A,
  ACT_COVER_SMG1_LOW = 0x12B,
  ACT_GESTURE_RANGE_ATTACK_AR1 = 0x12C,
  ACT_GESTURE_RANGE_ATTACK_AR2 = 0x12D,
  ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE = 0x12E,
  ACT_GESTURE_RANGE_ATTACK_HMG1 = 0x12F,
  ACT_GESTURE_RANGE_ATTACK_ML = 0x130,
  ACT_GESTURE_RANGE_ATTACK_SMG1 = 0x131,
  ACT_GESTURE_RANGE_ATTACK_SMG1_LOW = 0x132,
  ACT_GESTURE_RANGE_ATTACK_SMG2 = 0x133,
  ACT_GESTURE_RANGE_ATTACK_SHOTGUN = 0x134,
  ACT_GESTURE_RANGE_ATTACK_PISTOL = 0x135,
  ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW = 0x136,
  ACT_GESTURE_RANGE_ATTACK_SLAM = 0x137,
  ACT_GESTURE_RANGE_ATTACK_TRIPWIRE = 0x138,
  ACT_GESTURE_RANGE_ATTACK_THROW = 0x139,
  ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE = 0x13A,
  ACT_GESTURE_MELEE_ATTACK_SWING = 0x13B,
  ACT_IDLE_RIFLE = 0x13C,
  ACT_IDLE_SMG1 = 0x13D,
  ACT_IDLE_ANGRY_SMG1 = 0x13E,
  ACT_IDLE_PISTOL = 0x13F,
  ACT_IDLE_ANGRY_PISTOL = 0x140,
  ACT_IDLE_ANGRY_SHOTGUN = 0x141,
  ACT_IDLE_STEALTH_PISTOL = 0x142,
  ACT_IDLE_PACKAGE = 0x143,
  ACT_WALK_PACKAGE = 0x144,
  ACT_IDLE_SUITCASE = 0x145,
  ACT_WALK_SUITCASE = 0x146,
  ACT_IDLE_SMG1_RELAXED = 0x147,
  ACT_IDLE_SMG1_STIMULATED = 0x148,
  ACT_WALK_RIFLE_RELAXED = 0x149,
  ACT_RUN_RIFLE_RELAXED = 0x14A,
  ACT_WALK_RIFLE_STIMULATED = 0x14B,
  ACT_RUN_RIFLE_STIMULATED = 0x14C,
  ACT_IDLE_AIM_RIFLE_STIMULATED = 0x14D,
  ACT_WALK_AIM_RIFLE_STIMULATED = 0x14E,
  ACT_RUN_AIM_RIFLE_STIMULATED = 0x14F,
  ACT_IDLE_SHOTGUN_RELAXED = 0x150,
  ACT_IDLE_SHOTGUN_STIMULATED = 0x151,
  ACT_IDLE_SHOTGUN_AGITATED = 0x152,
  ACT_WALK_ANGRY = 0x153,
  ACT_POLICE_HARASS1 = 0x154,
  ACT_POLICE_HARASS2 = 0x155,
  ACT_IDLE_MANNEDGUN = 0x156,
  ACT_IDLE_MELEE = 0x157,
  ACT_IDLE_ANGRY_MELEE = 0x158,
  ACT_IDLE_RPG_RELAXED = 0x159,
  ACT_IDLE_RPG = 0x15A,
  ACT_IDLE_ANGRY_RPG = 0x15B,
  ACT_COVER_LOW_RPG = 0x15C,
  ACT_WALK_RPG = 0x15D,
  ACT_RUN_RPG = 0x15E,
  ACT_WALK_CROUCH_RPG = 0x15F,
  ACT_RUN_CROUCH_RPG = 0x160,
  ACT_WALK_RPG_RELAXED = 0x161,
  ACT_RUN_RPG_RELAXED = 0x162,
  ACT_WALK_RIFLE = 0x163,
  ACT_WALK_AIM_RIFLE = 0x164,
  ACT_WALK_CROUCH_RIFLE = 0x165,
  ACT_WALK_CROUCH_AIM_RIFLE = 0x166,
  ACT_RUN_RIFLE = 0x167,
  ACT_RUN_AIM_RIFLE = 0x168,
  ACT_RUN_CROUCH_RIFLE = 0x169,
  ACT_RUN_CROUCH_AIM_RIFLE = 0x16A,
  ACT_RUN_STEALTH_PISTOL = 0x16B,
  ACT_WALK_AIM_SHOTGUN = 0x16C,
  ACT_RUN_AIM_SHOTGUN = 0x16D,
  ACT_WALK_PISTOL = 0x16E,
  ACT_RUN_PISTOL = 0x16F,
  ACT_WALK_AIM_PISTOL = 0x170,
  ACT_RUN_AIM_PISTOL = 0x171,
  ACT_WALK_STEALTH_PISTOL = 0x172,
  ACT_WALK_AIM_STEALTH_PISTOL = 0x173,
  ACT_RUN_AIM_STEALTH_PISTOL = 0x174,
  ACT_RELOAD_PISTOL = 0x175,
  ACT_RELOAD_PISTOL_LOW = 0x176,
  ACT_RELOAD_SMG1 = 0x177,
  ACT_RELOAD_SMG1_LOW = 0x178,
  ACT_RELOAD_SHOTGUN = 0x179,
  ACT_RELOAD_SHOTGUN_LOW = 0x17A,
  ACT_GESTURE_RELOAD = 0x17B,
  ACT_GESTURE_RELOAD_PISTOL = 0x17C,
  ACT_GESTURE_RELOAD_SMG1 = 0x17D,
  ACT_GESTURE_RELOAD_SHOTGUN = 0x17E,
  ACT_BUSY_LEAN_LEFT = 0x17F,
  ACT_BUSY_LEAN_LEFT_ENTRY = 0x180,
  ACT_BUSY_LEAN_LEFT_EXIT = 0x181,
  ACT_BUSY_LEAN_BACK = 0x182,
  ACT_BUSY_LEAN_BACK_ENTRY = 0x183,
  ACT_BUSY_LEAN_BACK_EXIT = 0x184,
  ACT_BUSY_SIT_GROUND = 0x185,
  ACT_BUSY_SIT_GROUND_ENTRY = 0x186,
  ACT_BUSY_SIT_GROUND_EXIT = 0x187,
  ACT_BUSY_SIT_CHAIR = 0x188,
  ACT_BUSY_SIT_CHAIR_ENTRY = 0x189,
  ACT_BUSY_SIT_CHAIR_EXIT = 0x18A,
  ACT_BUSY_STAND = 0x18B,
  ACT_BUSY_QUEUE = 0x18C,
  ACT_DUCK_DODGE = 0x18D,
  ACT_DIE_BARNACLE_SWALLOW = 0x18E,
  ACT_GESTURE_BARNACLE_STRANGLE = 0x18F,
  ACT_PHYSCANNON_DETACH = 0x190,
  ACT_PHYSCANNON_ANIMATE = 0x191,
  ACT_PHYSCANNON_ANIMATE_PRE = 0x192,
  ACT_PHYSCANNON_ANIMATE_POST = 0x193,
  ACT_DIE_FRONTSIDE = 0x194,
  ACT_DIE_RIGHTSIDE = 0x195,
  ACT_DIE_BACKSIDE = 0x196,
  ACT_DIE_LEFTSIDE = 0x197,
  ACT_DIE_CROUCH_FRONTSIDE = 0x198,
  ACT_DIE_CROUCH_RIGHTSIDE = 0x199,
  ACT_DIE_CROUCH_BACKSIDE = 0x19A,
  ACT_DIE_CROUCH_LEFTSIDE = 0x19B,
  ACT_OPEN_DOOR = 0x19C,
  ACT_DI_ALYX_ZOMBIE_MELEE = 0x19D,
  ACT_DI_ALYX_ZOMBIE_TORSO_MELEE = 0x19E,
  ACT_DI_ALYX_HEADCRAB_MELEE = 0x19F,
  ACT_DI_ALYX_ANTLION = 0x1A0,
  ACT_DI_ALYX_ZOMBIE_SHOTGUN64 = 0x1A1,
  ACT_DI_ALYX_ZOMBIE_SHOTGUN26 = 0x1A2,
  ACT_READINESS_RELAXED_TO_STIMULATED = 0x1A3,
  ACT_READINESS_RELAXED_TO_STIMULATED_WALK = 0x1A4,
  ACT_READINESS_AGITATED_TO_STIMULATED = 0x1A5,
  ACT_READINESS_STIMULATED_TO_RELAXED = 0x1A6,
  ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED = 0x1A7,
  ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK = 0x1A8,
  ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED = 0x1A9,
  ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED = 0x1AA,
  ACT_IDLE_CARRY = 0x1AB,
  ACT_WALK_CARRY = 0x1AC,
  ACT_STARTDYING = 0x1AD,
  ACT_DYINGLOOP = 0x1AE,
  ACT_DYINGTODEAD = 0x1AF,
  ACT_RIDE_MANNED_GUN = 0x1B0,
  ACT_VM_SPRINT_ENTER = 0x1B1,
  ACT_VM_SPRINT_IDLE = 0x1B2,
  ACT_VM_SPRINT_LEAVE = 0x1B3,
  ACT_FIRE_START = 0x1B4,
  ACT_FIRE_LOOP = 0x1B5,
  ACT_FIRE_END = 0x1B6,
  ACT_CROUCHING_GRENADEIDLE = 0x1B7,
  ACT_CROUCHING_GRENADEREADY = 0x1B8,
  ACT_CROUCHING_PRIMARYATTACK = 0x1B9,
  ACT_OVERLAY_GRENADEIDLE = 0x1BA,
  ACT_OVERLAY_GRENADEREADY = 0x1BB,
  ACT_OVERLAY_PRIMARYATTACK = 0x1BC,
  ACT_OVERLAY_SHIELD_UP = 0x1BD,
  ACT_OVERLAY_SHIELD_DOWN = 0x1BE,
  ACT_OVERLAY_SHIELD_UP_IDLE = 0x1BF,
  ACT_OVERLAY_SHIELD_ATTACK = 0x1C0,
  ACT_OVERLAY_SHIELD_KNOCKBACK = 0x1C1,
  ACT_SHIELD_UP = 0x1C2,
  ACT_SHIELD_DOWN = 0x1C3,
  ACT_SHIELD_UP_IDLE = 0x1C4,
  ACT_SHIELD_ATTACK = 0x1C5,
  ACT_SHIELD_KNOCKBACK = 0x1C6,
  ACT_CROUCHING_SHIELD_UP = 0x1C7,
  ACT_CROUCHING_SHIELD_DOWN = 0x1C8,
  ACT_CROUCHING_SHIELD_UP_IDLE = 0x1C9,
  ACT_CROUCHING_SHIELD_ATTACK = 0x1CA,
  ACT_CROUCHING_SHIELD_KNOCKBACK = 0x1CB,
  ACT_TURNRIGHT45 = 0x1CC,
  ACT_TURNLEFT45 = 0x1CD,
  ACT_TURN = 0x1CE,
  ACT_OBJ_ASSEMBLING = 0x1CF,
  ACT_OBJ_DISMANTLING = 0x1D0,
  ACT_OBJ_STARTUP = 0x1D1,
  ACT_OBJ_RUNNING = 0x1D2,
  ACT_OBJ_IDLE = 0x1D3,
  ACT_OBJ_PLACING = 0x1D4,
  ACT_OBJ_DETERIORATING = 0x1D5,
  ACT_OBJ_UPGRADING = 0x1D6,
  ACT_DEPLOY = 0x1D7,
  ACT_DEPLOY_IDLE = 0x1D8,
  ACT_UNDEPLOY = 0x1D9,
  ACT_CROSSBOW_DRAW_UNLOADED = 0x1DA,
  ACT_GAUSS_SPINUP = 0x1DB,
  ACT_GAUSS_SPINCYCLE = 0x1DC,
  ACT_VM_PRIMARYATTACK_SILENCED = 0x1DD,
  ACT_VM_RELOAD_SILENCED = 0x1DE,
  ACT_VM_DRYFIRE_SILENCED = 0x1DF,
  ACT_VM_IDLE_SILENCED = 0x1E0,
  ACT_VM_DRAW_SILENCED = 0x1E1,
  ACT_VM_IDLE_EMPTY_LEFT = 0x1E2,
  ACT_VM_DRYFIRE_LEFT = 0x1E3,
  ACT_VM_IS_DRAW = 0x1E4,
  ACT_VM_IS_HOLSTER = 0x1E5,
  ACT_VM_IS_IDLE = 0x1E6,
  ACT_VM_IS_PRIMARYATTACK = 0x1E7,
  ACT_PLAYER_IDLE_FIRE = 0x1E8,
  ACT_PLAYER_CROUCH_FIRE = 0x1E9,
  ACT_PLAYER_CROUCH_WALK_FIRE = 0x1EA,
  ACT_PLAYER_WALK_FIRE = 0x1EB,
  ACT_PLAYER_RUN_FIRE = 0x1EC,
  ACT_IDLETORUN = 0x1ED,
  ACT_RUNTOIDLE = 0x1EE,
  ACT_VM_DRAW_DEPLOYED = 0x1EF,
  ACT_HL2MP_IDLE_MELEE = 0x1F0,
  ACT_HL2MP_RUN_MELEE = 0x1F1,
  ACT_HL2MP_IDLE_CROUCH_MELEE = 0x1F2,
  ACT_HL2MP_WALK_CROUCH_MELEE = 0x1F3,
  ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE = 0x1F4,
  ACT_HL2MP_GESTURE_RELOAD_MELEE = 0x1F5,
  ACT_HL2MP_JUMP_MELEE = 0x1F6,
  ACT_VM_FIZZLE = 0x1F7,
  ACT_MP_STAND_IDLE = 0x1F8,
  ACT_MP_CROUCH_IDLE = 0x1F9,
  ACT_MP_CROUCH_DEPLOYED_IDLE = 0x1FA,
  ACT_MP_CROUCH_DEPLOYED = 0x1FB,
  ACT_MP_DEPLOYED_IDLE = 0x1FC,
  ACT_MP_RUN = 0x1FD,
  ACT_MP_WALK = 0x1FE,
  ACT_MP_AIRWALK = 0x1FF,
  ACT_MP_CROUCHWALK = 0x200,
  ACT_MP_SPRINT = 0x201,
  ACT_MP_JUMP = 0x202,
  ACT_MP_JUMP_START = 0x203,
  ACT_MP_JUMP_FLOAT = 0x204,
  ACT_MP_JUMP_LAND = 0x205,
  ACT_MP_JUMP_IMPACT_N = 0x206,
  ACT_MP_JUMP_IMPACT_E = 0x207,
  ACT_MP_JUMP_IMPACT_W = 0x208,
  ACT_MP_JUMP_IMPACT_S = 0x209,
  ACT_MP_JUMP_IMPACT_TOP = 0x20A,
  ACT_MP_DOUBLEJUMP = 0x20B,
  ACT_MP_SWIM = 0x20C,
  ACT_MP_DEPLOYED = 0x20D,
  ACT_MP_SWIM_DEPLOYED = 0x20E,
  ACT_MP_VCD = 0x20F,
  ACT_MP_ATTACK_STAND_PRIMARYFIRE = 0x210,
  ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED = 0x211,
  ACT_MP_ATTACK_STAND_SECONDARYFIRE = 0x212,
  ACT_MP_ATTACK_STAND_GRENADE = 0x213,
  ACT_MP_ATTACK_CROUCH_PRIMARYFIRE = 0x214,
  ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED = 0x215,
  ACT_MP_ATTACK_CROUCH_SECONDARYFIRE = 0x216,
  ACT_MP_ATTACK_CROUCH_GRENADE = 0x217,
  ACT_MP_ATTACK_SWIM_PRIMARYFIRE = 0x218,
  ACT_MP_ATTACK_SWIM_SECONDARYFIRE = 0x219,
  ACT_MP_ATTACK_SWIM_GRENADE = 0x21A,
  ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE = 0x21B,
  ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE = 0x21C,
  ACT_MP_ATTACK_AIRWALK_GRENADE = 0x21D,
  ACT_MP_RELOAD_STAND = 0x21E,
  ACT_MP_RELOAD_STAND_LOOP = 0x21F,
  ACT_MP_RELOAD_STAND_END = 0x220,
  ACT_MP_RELOAD_CROUCH = 0x221,
  ACT_MP_RELOAD_CROUCH_LOOP = 0x222,
  ACT_MP_RELOAD_CROUCH_END = 0x223,
  ACT_MP_RELOAD_SWIM = 0x224,
  ACT_MP_RELOAD_SWIM_LOOP = 0x225,
  ACT_MP_RELOAD_SWIM_END = 0x226,
  ACT_MP_RELOAD_AIRWALK = 0x227,
  ACT_MP_RELOAD_AIRWALK_LOOP = 0x228,
  ACT_MP_RELOAD_AIRWALK_END = 0x229,
  ACT_MP_ATTACK_STAND_PREFIRE = 0x22A,
  ACT_MP_ATTACK_STAND_POSTFIRE = 0x22B,
  ACT_MP_ATTACK_STAND_STARTFIRE = 0x22C,
  ACT_MP_ATTACK_CROUCH_PREFIRE = 0x22D,
  ACT_MP_ATTACK_CROUCH_POSTFIRE = 0x22E,
  ACT_MP_ATTACK_SWIM_PREFIRE = 0x22F,
  ACT_MP_ATTACK_SWIM_POSTFIRE = 0x230,
  ACT_MP_STAND_PRIMARY = 0x231,
  ACT_MP_CROUCH_PRIMARY = 0x232,
  ACT_MP_RUN_PRIMARY = 0x233,
  ACT_MP_WALK_PRIMARY = 0x234,
  ACT_MP_AIRWALK_PRIMARY = 0x235,
  ACT_MP_CROUCHWALK_PRIMARY = 0x236,
  ACT_MP_JUMP_PRIMARY = 0x237,
  ACT_MP_JUMP_START_PRIMARY = 0x238,
  ACT_MP_JUMP_FLOAT_PRIMARY = 0x239,
  ACT_MP_JUMP_LAND_PRIMARY = 0x23A,
  ACT_MP_SWIM_PRIMARY = 0x23B,
  ACT_MP_DEPLOYED_PRIMARY = 0x23C,
  ACT_MP_SWIM_DEPLOYED_PRIMARY = 0x23D,
  ACT_MP_ATTACK_STAND_PRIMARY = 0x23E,
  ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED = 0x23F,
  ACT_MP_ATTACK_CROUCH_PRIMARY = 0x240,
  ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED = 0x241,
  ACT_MP_ATTACK_SWIM_PRIMARY = 0x242,
  ACT_MP_ATTACK_AIRWALK_PRIMARY = 0x243,
  ACT_MP_RELOAD_STAND_PRIMARY = 0x244,
  ACT_MP_RELOAD_STAND_PRIMARY_LOOP = 0x245,
  ACT_MP_RELOAD_STAND_PRIMARY_END = 0x246,
  ACT_MP_RELOAD_CROUCH_PRIMARY = 0x247,
  ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP = 0x248,
  ACT_MP_RELOAD_CROUCH_PRIMARY_END = 0x249,
  ACT_MP_RELOAD_SWIM_PRIMARY = 0x24A,
  ACT_MP_RELOAD_SWIM_PRIMARY_LOOP = 0x24B,
  ACT_MP_RELOAD_SWIM_PRIMARY_END = 0x24C,
  ACT_MP_RELOAD_AIRWALK_PRIMARY = 0x24D,
  ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP = 0x24E,
  ACT_MP_RELOAD_AIRWALK_PRIMARY_END = 0x24F,
  ACT_MP_ATTACK_STAND_GRENADE_PRIMARY = 0x250,
  ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY = 0x251,
  ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY = 0x252,
  ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY = 0x253,
  ACT_MP_STAND_SECONDARY = 0x254,
  ACT_MP_CROUCH_SECONDARY = 0x255,
  ACT_MP_RUN_SECONDARY = 0x256,
  ACT_MP_WALK_SECONDARY = 0x257,
  ACT_MP_AIRWALK_SECONDARY = 0x258,
  ACT_MP_CROUCHWALK_SECONDARY = 0x259,
  ACT_MP_JUMP_SECONDARY = 0x25A,
  ACT_MP_JUMP_START_SECONDARY = 0x25B,
  ACT_MP_JUMP_FLOAT_SECONDARY = 0x25C,
  ACT_MP_JUMP_LAND_SECONDARY = 0x25D,
  ACT_MP_SWIM_SECONDARY = 0x25E,
  ACT_MP_ATTACK_STAND_SECONDARY = 0x25F,
  ACT_MP_ATTACK_CROUCH_SECONDARY = 0x260,
  ACT_MP_ATTACK_SWIM_SECONDARY = 0x261,
  ACT_MP_ATTACK_AIRWALK_SECONDARY = 0x262,
  ACT_MP_RELOAD_STAND_SECONDARY = 0x263,
  ACT_MP_RELOAD_STAND_SECONDARY_LOOP = 0x264,
  ACT_MP_RELOAD_STAND_SECONDARY_END = 0x265,
  ACT_MP_RELOAD_CROUCH_SECONDARY = 0x266,
  ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP = 0x267,
  ACT_MP_RELOAD_CROUCH_SECONDARY_END = 0x268,
  ACT_MP_RELOAD_SWIM_SECONDARY = 0x269,
  ACT_MP_RELOAD_SWIM_SECONDARY_LOOP = 0x26A,
  ACT_MP_RELOAD_SWIM_SECONDARY_END = 0x26B,
  ACT_MP_RELOAD_AIRWALK_SECONDARY = 0x26C,
  ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP = 0x26D,
  ACT_MP_RELOAD_AIRWALK_SECONDARY_END = 0x26E,
  ACT_MP_ATTACK_STAND_GRENADE_SECONDARY = 0x26F,
  ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY = 0x270,
  ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY = 0x271,
  ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY = 0x272,
  ACT_MP_STAND_MELEE = 0x273,
  ACT_MP_CROUCH_MELEE = 0x274,
  ACT_MP_RUN_MELEE = 0x275,
  ACT_MP_WALK_MELEE = 0x276,
  ACT_MP_AIRWALK_MELEE = 0x277,
  ACT_MP_CROUCHWALK_MELEE = 0x278,
  ACT_MP_JUMP_MELEE = 0x279,
  ACT_MP_JUMP_START_MELEE = 0x27A,
  ACT_MP_JUMP_FLOAT_MELEE = 0x27B,
  ACT_MP_JUMP_LAND_MELEE = 0x27C,
  ACT_MP_SWIM_MELEE = 0x27D,
  ACT_MP_ATTACK_STAND_MELEE = 0x27E,
  ACT_MP_ATTACK_STAND_MELEE_SECONDARY = 0x27F,
  ACT_MP_ATTACK_CROUCH_MELEE = 0x280,
  ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY = 0x281,
  ACT_MP_ATTACK_SWIM_MELEE = 0x282,
  ACT_MP_ATTACK_AIRWALK_MELEE = 0x283,
  ACT_MP_ATTACK_STAND_GRENADE_MELEE = 0x284,
  ACT_MP_ATTACK_CROUCH_GRENADE_MELEE = 0x285,
  ACT_MP_ATTACK_SWIM_GRENADE_MELEE = 0x286,
  ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE = 0x287,
  ACT_MP_STAND_ITEM1 = 0x288,
  ACT_MP_CROUCH_ITEM1 = 0x289,
  ACT_MP_RUN_ITEM1 = 0x28A,
  ACT_MP_WALK_ITEM1 = 0x28B,
  ACT_MP_AIRWALK_ITEM1 = 0x28C,
  ACT_MP_CROUCHWALK_ITEM1 = 0x28D,
  ACT_MP_JUMP_ITEM1 = 0x28E,
  ACT_MP_JUMP_START_ITEM1 = 0x28F,
  ACT_MP_JUMP_FLOAT_ITEM1 = 0x290,
  ACT_MP_JUMP_LAND_ITEM1 = 0x291,
  ACT_MP_SWIM_ITEM1 = 0x292,
  ACT_MP_ATTACK_STAND_ITEM1 = 0x293,
  ACT_MP_ATTACK_STAND_ITEM1_SECONDARY = 0x294,
  ACT_MP_ATTACK_CROUCH_ITEM1 = 0x295,
  ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY = 0x296,
  ACT_MP_ATTACK_SWIM_ITEM1 = 0x297,
  ACT_MP_ATTACK_AIRWALK_ITEM1 = 0x298,
  ACT_MP_STAND_ITEM2 = 0x299,
  ACT_MP_CROUCH_ITEM2 = 0x29A,
  ACT_MP_RUN_ITEM2 = 0x29B,
  ACT_MP_WALK_ITEM2 = 0x29C,
  ACT_MP_AIRWALK_ITEM2 = 0x29D,
  ACT_MP_CROUCHWALK_ITEM2 = 0x29E,
  ACT_MP_JUMP_ITEM2 = 0x29F,
  ACT_MP_JUMP_START_ITEM2 = 0x2A0,
  ACT_MP_JUMP_FLOAT_ITEM2 = 0x2A1,
  ACT_MP_JUMP_LAND_ITEM2 = 0x2A2,
  ACT_MP_SWIM_ITEM2 = 0x2A3,
  ACT_MP_ATTACK_STAND_ITEM2 = 0x2A4,
  ACT_MP_ATTACK_STAND_ITEM2_SECONDARY = 0x2A5,
  ACT_MP_ATTACK_CROUCH_ITEM2 = 0x2A6,
  ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY = 0x2A7,
  ACT_MP_ATTACK_SWIM_ITEM2 = 0x2A8,
  ACT_MP_ATTACK_AIRWALK_ITEM2 = 0x2A9,
  ACT_MP_GESTURE_FLINCH = 0x2AA,
  ACT_MP_GESTURE_FLINCH_PRIMARY = 0x2AB,
  ACT_MP_GESTURE_FLINCH_SECONDARY = 0x2AC,
  ACT_MP_GESTURE_FLINCH_MELEE = 0x2AD,
  ACT_MP_GESTURE_FLINCH_ITEM1 = 0x2AE,
  ACT_MP_GESTURE_FLINCH_ITEM2 = 0x2AF,
  ACT_MP_GESTURE_FLINCH_HEAD = 0x2B0,
  ACT_MP_GESTURE_FLINCH_CHEST = 0x2B1,
  ACT_MP_GESTURE_FLINCH_STOMACH = 0x2B2,
  ACT_MP_GESTURE_FLINCH_LEFTARM = 0x2B3,
  ACT_MP_GESTURE_FLINCH_RIGHTARM = 0x2B4,
  ACT_MP_GESTURE_FLINCH_LEFTLEG = 0x2B5,
  ACT_MP_GESTURE_FLINCH_RIGHTLEG = 0x2B6,
  ACT_MP_GRENADE1_DRAW = 0x2B7,
  ACT_MP_GRENADE1_IDLE = 0x2B8,
  ACT_MP_GRENADE1_ATTACK = 0x2B9,
  ACT_MP_GRENADE2_DRAW = 0x2BA,
  ACT_MP_GRENADE2_IDLE = 0x2BB,
  ACT_MP_GRENADE2_ATTACK = 0x2BC,
  ACT_MP_PRIMARY_GRENADE1_DRAW = 0x2BD,
  ACT_MP_PRIMARY_GRENADE1_IDLE = 0x2BE,
  ACT_MP_PRIMARY_GRENADE1_ATTACK = 0x2BF,
  ACT_MP_PRIMARY_GRENADE2_DRAW = 0x2C0,
  ACT_MP_PRIMARY_GRENADE2_IDLE = 0x2C1,
  ACT_MP_PRIMARY_GRENADE2_ATTACK = 0x2C2,
  ACT_MP_SECONDARY_GRENADE1_DRAW = 0x2C3,
  ACT_MP_SECONDARY_GRENADE1_IDLE = 0x2C4,
  ACT_MP_SECONDARY_GRENADE1_ATTACK = 0x2C5,
  ACT_MP_SECONDARY_GRENADE2_DRAW = 0x2C6,
  ACT_MP_SECONDARY_GRENADE2_IDLE = 0x2C7,
  ACT_MP_SECONDARY_GRENADE2_ATTACK = 0x2C8,
  ACT_MP_MELEE_GRENADE1_DRAW = 0x2C9,
  ACT_MP_MELEE_GRENADE1_IDLE = 0x2CA,
  ACT_MP_MELEE_GRENADE1_ATTACK = 0x2CB,
  ACT_MP_MELEE_GRENADE2_DRAW = 0x2CC,
  ACT_MP_MELEE_GRENADE2_IDLE = 0x2CD,
  ACT_MP_MELEE_GRENADE2_ATTACK = 0x2CE,
  ACT_MP_ITEM1_GRENADE1_DRAW = 0x2CF,
  ACT_MP_ITEM1_GRENADE1_IDLE = 0x2D0,
  ACT_MP_ITEM1_GRENADE1_ATTACK = 0x2D1,
  ACT_MP_ITEM1_GRENADE2_DRAW = 0x2D2,
  ACT_MP_ITEM1_GRENADE2_IDLE = 0x2D3,
  ACT_MP_ITEM1_GRENADE2_ATTACK = 0x2D4,
  ACT_MP_ITEM2_GRENADE1_DRAW = 0x2D5,
  ACT_MP_ITEM2_GRENADE1_IDLE = 0x2D6,
  ACT_MP_ITEM2_GRENADE1_ATTACK = 0x2D7,
  ACT_MP_ITEM2_GRENADE2_DRAW = 0x2D8,
  ACT_MP_ITEM2_GRENADE2_IDLE = 0x2D9,
  ACT_MP_ITEM2_GRENADE2_ATTACK = 0x2DA,
  ACT_MP_STAND_BUILDING = 0x2DB,
  ACT_MP_CROUCH_BUILDING = 0x2DC,
  ACT_MP_RUN_BUILDING = 0x2DD,
  ACT_MP_WALK_BUILDING = 0x2DE,
  ACT_MP_AIRWALK_BUILDING = 0x2DF,
  ACT_MP_CROUCHWALK_BUILDING = 0x2E0,
  ACT_MP_JUMP_BUILDING = 0x2E1,
  ACT_MP_JUMP_START_BUILDING = 0x2E2,
  ACT_MP_JUMP_FLOAT_BUILDING = 0x2E3,
  ACT_MP_JUMP_LAND_BUILDING = 0x2E4,
  ACT_MP_SWIM_BUILDING = 0x2E5,
  ACT_MP_ATTACK_STAND_BUILDING = 0x2E6,
  ACT_MP_ATTACK_CROUCH_BUILDING = 0x2E7,
  ACT_MP_ATTACK_SWIM_BUILDING = 0x2E8,
  ACT_MP_ATTACK_AIRWALK_BUILDING = 0x2E9,
  ACT_MP_ATTACK_STAND_GRENADE_BUILDING = 0x2EA,
  ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING = 0x2EB,
  ACT_MP_ATTACK_SWIM_GRENADE_BUILDING = 0x2EC,
  ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING = 0x2ED,
  ACT_MP_STAND_PDA = 0x2EE,
  ACT_MP_CROUCH_PDA = 0x2EF,
  ACT_MP_RUN_PDA = 0x2F0,
  ACT_MP_WALK_PDA = 0x2F1,
  ACT_MP_AIRWALK_PDA = 0x2F2,
  ACT_MP_CROUCHWALK_PDA = 0x2F3,
  ACT_MP_JUMP_PDA = 0x2F4,
  ACT_MP_JUMP_START_PDA = 0x2F5,
  ACT_MP_JUMP_FLOAT_PDA = 0x2F6,
  ACT_MP_JUMP_LAND_PDA = 0x2F7,
  ACT_MP_SWIM_PDA = 0x2F8,
  ACT_MP_ATTACK_STAND_PDA = 0x2F9,
  ACT_MP_ATTACK_SWIM_PDA = 0x2FA,
  ACT_MP_GESTURE_VC_HANDMOUTH = 0x2FB,
  ACT_MP_GESTURE_VC_FINGERPOINT = 0x2FC,
  ACT_MP_GESTURE_VC_FISTPUMP = 0x2FD,
  ACT_MP_GESTURE_VC_THUMBSUP = 0x2FE,
  ACT_MP_GESTURE_VC_NODYES = 0x2FF,
  ACT_MP_GESTURE_VC_NODNO = 0x300,
  ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY = 0x301,
  ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY = 0x302,
  ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY = 0x303,
  ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY = 0x304,
  ACT_MP_GESTURE_VC_NODYES_PRIMARY = 0x305,
  ACT_MP_GESTURE_VC_NODNO_PRIMARY = 0x306,
  ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY = 0x307,
  ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY = 0x308,
  ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY = 0x309,
  ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY = 0x30A,
  ACT_MP_GESTURE_VC_NODYES_SECONDARY = 0x30B,
  ACT_MP_GESTURE_VC_NODNO_SECONDARY = 0x30C,
  ACT_MP_GESTURE_VC_HANDMOUTH_MELEE = 0x30D,
  ACT_MP_GESTURE_VC_FINGERPOINT_MELEE = 0x30E,
  ACT_MP_GESTURE_VC_FISTPUMP_MELEE = 0x30F,
  ACT_MP_GESTURE_VC_THUMBSUP_MELEE = 0x310,
  ACT_MP_GESTURE_VC_NODYES_MELEE = 0x311,
  ACT_MP_GESTURE_VC_NODNO_MELEE = 0x312,
  ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1 = 0x313,
  ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1 = 0x314,
  ACT_MP_GESTURE_VC_FISTPUMP_ITEM1 = 0x315,
  ACT_MP_GESTURE_VC_THUMBSUP_ITEM1 = 0x316,
  ACT_MP_GESTURE_VC_NODYES_ITEM1 = 0x317,
  ACT_MP_GESTURE_VC_NODNO_ITEM1 = 0x318,
  ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2 = 0x319,
  ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2 = 0x31A,
  ACT_MP_GESTURE_VC_FISTPUMP_ITEM2 = 0x31B,
  ACT_MP_GESTURE_VC_THUMBSUP_ITEM2 = 0x31C,
  ACT_MP_GESTURE_VC_NODYES_ITEM2 = 0x31D,
  ACT_MP_GESTURE_VC_NODNO_ITEM2 = 0x31E,
  ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING = 0x31F,
  ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING = 0x320,
  ACT_MP_GESTURE_VC_FISTPUMP_BUILDING = 0x321,
  ACT_MP_GESTURE_VC_THUMBSUP_BUILDING = 0x322,
  ACT_MP_GESTURE_VC_NODYES_BUILDING = 0x323,
  ACT_MP_GESTURE_VC_NODNO_BUILDING = 0x324,
  ACT_MP_GESTURE_VC_HANDMOUTH_PDA = 0x325,
  ACT_MP_GESTURE_VC_FINGERPOINT_PDA = 0x326,
  ACT_MP_GESTURE_VC_FISTPUMP_PDA = 0x327,
  ACT_MP_GESTURE_VC_THUMBSUP_PDA = 0x328,
  ACT_MP_GESTURE_VC_NODYES_PDA = 0x329,
  ACT_MP_GESTURE_VC_NODNO_PDA = 0x32A,
  ACT_VM_UNUSABLE = 0x32B,
  ACT_VM_UNUSABLE_TO_USABLE = 0x32C,
  ACT_VM_USABLE_TO_UNUSABLE = 0x32D,
  ACT_PRIMARY_VM_DRAW = 0x32E,
  ACT_PRIMARY_VM_HOLSTER = 0x32F,
  ACT_PRIMARY_VM_IDLE = 0x330,
  ACT_PRIMARY_VM_PULLBACK = 0x331,
  ACT_PRIMARY_VM_PRIMARYATTACK = 0x332,
  ACT_PRIMARY_VM_SECONDARYATTACK = 0x333,
  ACT_PRIMARY_VM_RELOAD = 0x334,
  ACT_PRIMARY_VM_DRYFIRE = 0x335,
  ACT_PRIMARY_VM_IDLE_TO_LOWERED = 0x336,
  ACT_PRIMARY_VM_IDLE_LOWERED = 0x337,
  ACT_PRIMARY_VM_LOWERED_TO_IDLE = 0x338,
  ACT_SECONDARY_VM_DRAW = 0x339,
  ACT_SECONDARY_VM_HOLSTER = 0x33A,
  ACT_SECONDARY_VM_IDLE = 0x33B,
  ACT_SECONDARY_VM_PULLBACK = 0x33C,
  ACT_SECONDARY_VM_PRIMARYATTACK = 0x33D,
  ACT_SECONDARY_VM_SECONDARYATTACK = 0x33E,
  ACT_SECONDARY_VM_RELOAD = 0x33F,
  ACT_SECONDARY_VM_DRYFIRE = 0x340,
  ACT_SECONDARY_VM_IDLE_TO_LOWERED = 0x341,
  ACT_SECONDARY_VM_IDLE_LOWERED = 0x342,
  ACT_SECONDARY_VM_LOWERED_TO_IDLE = 0x343,
  ACT_MELEE_VM_DRAW = 0x344,
  ACT_MELEE_VM_HOLSTER = 0x345,
  ACT_MELEE_VM_IDLE = 0x346,
  ACT_MELEE_VM_PULLBACK = 0x347,
  ACT_MELEE_VM_PRIMARYATTACK = 0x348,
  ACT_MELEE_VM_SECONDARYATTACK = 0x349,
  ACT_MELEE_VM_RELOAD = 0x34A,
  ACT_MELEE_VM_DRYFIRE = 0x34B,
  ACT_MELEE_VM_IDLE_TO_LOWERED = 0x34C,
  ACT_MELEE_VM_IDLE_LOWERED = 0x34D,
  ACT_MELEE_VM_LOWERED_TO_IDLE = 0x34E,
  ACT_PDA_VM_DRAW = 0x34F,
  ACT_PDA_VM_HOLSTER = 0x350,
  ACT_PDA_VM_IDLE = 0x351,
  ACT_PDA_VM_PULLBACK = 0x352,
  ACT_PDA_VM_PRIMARYATTACK = 0x353,
  ACT_PDA_VM_SECONDARYATTACK = 0x354,
  ACT_PDA_VM_RELOAD = 0x355,
  ACT_PDA_VM_DRYFIRE = 0x356,
  ACT_PDA_VM_IDLE_TO_LOWERED = 0x357,
  ACT_PDA_VM_IDLE_LOWERED = 0x358,
  ACT_PDA_VM_LOWERED_TO_IDLE = 0x359,
  ACT_ITEM1_VM_DRAW = 0x35A,
  ACT_ITEM1_VM_HOLSTER = 0x35B,
  ACT_ITEM1_VM_IDLE = 0x35C,
  ACT_ITEM1_VM_PULLBACK = 0x35D,
  ACT_ITEM1_VM_PRIMARYATTACK = 0x35E,
  ACT_ITEM1_VM_SECONDARYATTACK = 0x35F,
  ACT_ITEM1_VM_RELOAD = 0x360,
  ACT_ITEM1_VM_DRYFIRE = 0x361,
  ACT_ITEM1_VM_IDLE_TO_LOWERED = 0x362,
  ACT_ITEM1_VM_IDLE_LOWERED = 0x363,
  ACT_ITEM1_VM_LOWERED_TO_IDLE = 0x364,
  ACT_ITEM2_VM_DRAW = 0x365,
  ACT_ITEM2_VM_HOLSTER = 0x366,
  ACT_ITEM2_VM_IDLE = 0x367,
  ACT_ITEM2_VM_PULLBACK = 0x368,
  ACT_ITEM2_VM_PRIMARYATTACK = 0x369,
  ACT_ITEM2_VM_SECONDARYATTACK = 0x36A,
  ACT_ITEM2_VM_RELOAD = 0x36B,
  ACT_ITEM2_VM_DRYFIRE = 0x36C,
  ACT_ITEM2_VM_IDLE_TO_LOWERED = 0x36D,
  ACT_ITEM2_VM_IDLE_LOWERED = 0x36E,
  ACT_ITEM2_VM_LOWERED_TO_IDLE = 0x36F,
  ACT_RELOAD_SUCCEED = 0x370,
  ACT_RELOAD_FAIL = 0x371,
  ACT_WALK_AIM_AUTOGUN = 0x372,
  ACT_RUN_AIM_AUTOGUN = 0x373,
  ACT_IDLE_AUTOGUN = 0x374,
  ACT_IDLE_AIM_AUTOGUN = 0x375,
  ACT_RELOAD_AUTOGUN = 0x376,
  ACT_CROUCH_IDLE_AUTOGUN = 0x377,
  ACT_RANGE_ATTACK_AUTOGUN = 0x378,
  ACT_JUMP_AUTOGUN = 0x379,
  ACT_IDLE_AIM_PISTOL = 0x37A,
  ACT_WALK_AIM_DUAL = 0x37B,
  ACT_RUN_AIM_DUAL = 0x37C,
  ACT_IDLE_DUAL = 0x37D,
  ACT_IDLE_AIM_DUAL = 0x37E,
  ACT_RELOAD_DUAL = 0x37F,
  ACT_CROUCH_IDLE_DUAL = 0x380,
  ACT_RANGE_ATTACK_DUAL = 0x381,
  ACT_JUMP_DUAL = 0x382,
  ACT_IDLE_SHOTGUN = 0x383,
  ACT_IDLE_AIM_SHOTGUN = 0x384,
  ACT_CROUCH_IDLE_SHOTGUN = 0x385,
  ACT_JUMP_SHOTGUN = 0x386,
  ACT_IDLE_AIM_RIFLE = 0x387,
  ACT_RELOAD_RIFLE = 0x388,
  ACT_CROUCH_IDLE_RIFLE = 0x389,
  ACT_RANGE_ATTACK_RIFLE = 0x38A,
  ACT_JUMP_RIFLE = 0x38B,
  ACT_SLEEP = 0x38C,
  ACT_WAKE = 0x38D,
  ACT_FLICK_LEFT = 0x38E,
  ACT_FLICK_LEFT_MIDDLE = 0x38F,
  ACT_FLICK_RIGHT_MIDDLE = 0x390,
  ACT_FLICK_RIGHT = 0x391,
  ACT_SPINAROUND = 0x392,
  ACT_PREP_TO_FIRE = 0x393,
  ACT_FIRE = 0x394,
  ACT_FIRE_RECOVER = 0x395,
  ACT_SPRAY = 0x396,
  ACT_PREP_EXPLODE = 0x397,
  ACT_EXPLODE = 0x398,
  ACT_DOTA_IDLE = 0x399,
  ACT_DOTA_RUN = 0x39A,
  ACT_DOTA_ATTACK = 0x39B,
  ACT_DOTA_ATTACK_EVENT = 0x39C,
  ACT_DOTA_DIE = 0x39D,
  ACT_DOTA_FLINCH = 0x39E,
  ACT_DOTA_DISABLED = 0x39F,
  ACT_DOTA_CAST_ABILITY_1 = 0x3A0,
  ACT_DOTA_CAST_ABILITY_2 = 0x3A1,
  ACT_DOTA_CAST_ABILITY_3 = 0x3A2,
  ACT_DOTA_CAST_ABILITY_4 = 0x3A3,
  ACT_DOTA_OVERRIDE_ABILITY_1 = 0x3A4,
  ACT_DOTA_OVERRIDE_ABILITY_2 = 0x3A5,
  ACT_DOTA_OVERRIDE_ABILITY_3 = 0x3A6,
  ACT_DOTA_OVERRIDE_ABILITY_4 = 0x3A7,
  ACT_DOTA_CHANNEL_ABILITY_1 = 0x3A8,
  ACT_DOTA_CHANNEL_ABILITY_2 = 0x3A9,
  ACT_DOTA_CHANNEL_ABILITY_3 = 0x3AA,
  ACT_DOTA_CHANNEL_ABILITY_4 = 0x3AB,
  ACT_DOTA_CHANNEL_END_ABILITY_1 = 0x3AC,
  ACT_DOTA_CHANNEL_END_ABILITY_2 = 0x3AD,
  ACT_DOTA_CHANNEL_END_ABILITY_3 = 0x3AE,
  ACT_DOTA_CHANNEL_END_ABILITY_4 = 0x3AF,
  ACT_MP_RUN_SPEEDPAINT = 0x3B0,
  ACT_MP_LONG_FALL = 0x3B1,
  ACT_MP_TRACTORBEAM_FLOAT = 0x3B2,
  ACT_MP_DEATH_CRUSH = 0x3B3,
  ACT_MP_RUN_SPEEDPAINT_PRIMARY = 0x3B4,
  ACT_MP_DROWNING_PRIMARY = 0x3B5,
  ACT_MP_LONG_FALL_PRIMARY = 0x3B6,
  ACT_MP_TRACTORBEAM_FLOAT_PRIMARY = 0x3B7,
  ACT_MP_DEATH_CRUSH_PRIMARY = 0x3B8,
  ACT_DIE_STAND = 0x3B9,
  ACT_DIE_STAND_HEADSHOT = 0x3BA,
  ACT_DIE_CROUCH = 0x3BB,
  ACT_DIE_CROUCH_HEADSHOT = 0x3BC,
  ACT_CSGO_NULL = 0x3BD,
  ACT_CSGO_DEFUSE = 0x3BE,
  ACT_CSGO_DEFUSE_WITH_KIT = 0x3BF,
  ACT_CSGO_FLASHBANG_REACTION = 0x3C0,
  ACT_CSGO_FIRE_PRIMARY = 0x3C1,
  ACT_CSGO_FIRE_PRIMARY_OPT_1 = 0x3C2,
  ACT_CSGO_FIRE_PRIMARY_OPT_2 = 0x3C3,
  ACT_CSGO_FIRE_SECONDARY = 0x3C4,
  ACT_CSGO_FIRE_SECONDARY_OPT_1 = 0x3C5,
  ACT_CSGO_FIRE_SECONDARY_OPT_2 = 0x3C6,
  ACT_CSGO_RELOAD = 0x3C7,
  ACT_CSGO_RELOAD_START = 0x3C8,
  ACT_CSGO_RELOAD_LOOP = 0x3C9,
  ACT_CSGO_RELOAD_END = 0x3CA,
  ACT_CSGO_OPERATE = 0x3CB,
  ACT_CSGO_DEPLOY = 0x3CC,
  ACT_CSGO_CATCH = 0x3CD,
  ACT_CSGO_SILENCER_DETACH = 0x3CE,
  ACT_CSGO_SILENCER_ATTACH = 0x3CF,
  ACT_CSGO_TWITCH = 0x3D0,
  ACT_CSGO_TWITCH_BUYZONE = 0x3D1,
  ACT_CSGO_PLANT_BOMB = 0x3D2,
  ACT_CSGO_IDLE_TURN_BALANCEADJUST = 0x3D3,
  ACT_CSGO_IDLE_ADJUST_STOPPEDMOVING = 0x3D4,
  ACT_CSGO_ALIVE_LOOP = 0x3D5,
  ACT_CSGO_FLINCH = 0x3D6,
  ACT_CSGO_FLINCH_HEAD = 0x3D7,
  ACT_CSGO_FLINCH_MOLOTOV = 0x3D8,
  ACT_CSGO_JUMP = 0x3D9,
  ACT_CSGO_FALL = 0x3DA,
  ACT_CSGO_CLIMB_LADDER = 0x3DB,
  ACT_CSGO_LAND_LIGHT = 0x3DC,
  ACT_CSGO_LAND_HEAVY = 0x3DD,
  ACT_CSGO_EXIT_LADDER_TOP = 0x3DE,
  ACT_CSGO_EXIT_LADDER_BOTTOM = 0x3DF,
  LAST_SHARED_ACTIVITY = 0x3E0,
};

/* 35 */
struct C_SDK::Classes::CAnimationLayer::Server
{
  int m_flags;
  bool m_sequenceFinished;
  bool m_looping;
  int m_sequence;
  float m_cycle;
  float m_playbackRate;
  float m_prevCycle;
  float m_weight;
  float m_weightDeltaRate;
  float m_blendIn;
  float m_blendOut;
  float m_killRate;
  float m_killDelay;
  float m_layerAnimTime;
  float m_layerFadeOutTime;
  void *m_dispatchedStudioHdr;
  int m_dispatchedSrc;
  int m_dispatchedDst;
  void *m_activity;
  C_SDK::Classes::Animation::Activity activity;
  int m_order;
  float m_lastEventCheck;
  float m_lastAccess;
  void *m_ownerEntity;
};

/* 36 */
struct C_SDK::Structs::EventInfo
{
  int m_userId;
  int m_attackerId;
  char m_health;
  char m_armor;
  __unaligned __declspec(align(1)) const char *m_weapon;
  __unaligned __declspec(align(1)) int m_damageHealth;
  char m_damageArmor;
  char m_hitGroup;
};

/* 38 */
typedef unsigned __int8 BYTE;

/* 39 */
#pragma pack(push, 4)
union _IMAGE_SECTION_HEADER::$39DFBA39B6D121CDFC1ACE66C995549C
{
  DWORD PhysicalAddress;
  DWORD VirtualSize;
};
#pragma pack(pop)

/* 41 */
typedef unsigned __int16 WORD;

/* 37 */
#pragma pack(push, 4)
struct _IMAGE_SECTION_HEADER
{
  BYTE Name[8];
  _IMAGE_SECTION_HEADER::$39DFBA39B6D121CDFC1ACE66C995549C Misc;
  DWORD VirtualAddress;
  DWORD SizeOfRawData;
  DWORD PointerToRawData;
  DWORD PointerToRelocations;
  DWORD PointerToLinenumbers;
  WORD NumberOfRelocations;
  WORD NumberOfLinenumbers;
  DWORD Characteristics;
};
#pragma pack(pop)

/* 43 */
struct OneTap::Classes::CBufferedCommand
{
  __declspec(align(4)) C_SDK::Classes::CUserCmd *m_userCmd;
  __declspec(align(4)) C_SDK::Classes::CVerifiedUserCmd *m_verifiedCommand;
  __declspec(align(4)) C_SDK::Classes::Math::Vector::Rectangular m_wishMove;
  __declspec(align(4)) C_SDK::Classes::Math::Vector::Rectangular m_viewAngles;
};

/* 42 */
struct OneTap::Classes::CommandManager
{
  __declspec(align(4)) int m_sequence;
  __declspec(align(4)) int m_prevSequence;
  __declspec(align(4)) int m_unknown;
  __declspec(align(4)) OneTap::Classes::CBufferedCommand m_commands[150];
  __declspec(align(4)) bool m_init;
  char m_choked[1][15];
};

/* 44 */
struct C_SDK::Classes::CVerifiedUserCmd
{
  _BYTE gap0[76];
  unsigned int m_crc32;
};

/* 46 */
enum C_SDK::Security::FNV1A::Modules
{
  C_SDK::Security::FNV1A::Modules::ClientPanorama = 0x63DC72EC,
  C_SDK::Security::FNV1A::Modules::NtDLL = 0x6FDE2541,
  C_SDK::Security::FNV1A::Modules::Tier0 = 0x8DA048BB,
  C_SDK::Security::FNV1A::Modules::Client = 0x8F929C1E,
  C_SDK::Security::FNV1A::Modules::Engine = 0xEE05D83B,
};

/* 47 */
struct __declspec(align(4)) OneTap::Classes::Player::LagData
{
  _BYTE gap0[36];
  _BYTE m_flags;
  _BYTE gap25[19];
  float m_resolve_m_eyeAngles_y;
  _BYTE gap3C[12];
  float m_vecVelocity_y;
  float m_vecVelocity_z;
  _BYTE gap50[216];
  float m_serverLayers_adjust_weight;
  _BYTE gap12C[8];
  float m_serverLayers_adjust_cycle;
  _BYTE gap138[152];
  float m_serverLayers_movement;
  _BYTE gap1D4[4];
  float m_serverLayers_movement_playRate;
  _BYTE gap1DC[324];
  float m_serverLayers_lean;
  _BYTE gap324[29];
  _BYTE m_way;
  _DWORD m_side;
  _BYTE gap348[376];
  float m_resolverLayers_none_movement_playRate;
  _BYTE gap4C4[724];
  float m_resolverLayers_right_movement_playRate;
  _BYTE gap79C[724];
  float m_resolverLayers_left_movement_playRate;
};

/* 50 */
enum C_SDK::Server::Types
{
  C_SDK::Server::Types::DEFAULT = 0x0,
  C_SDK::Server::Types::LEGACY = 0x1,
  C_SDK::Server::Types::FAKE_LEGACY = 0x2,
};

/* 51 */
struct C_SDK::Classes::CWeapon::CCSWeaponInfo
{
  _BYTE pad00[1984];
  void *m_iconActive;
  _BYTE pad774[60];
  float m_armorRatio;
  _BYTE pad02[16];
  float m_penetration;
  int m_Damage;
  float m_range;
  float m_rangeModifier;
  int m_bulletsPerShot;
};

/* 52 */
struct C_SDK::Classes::Math::Vector::Flat
{
  float m_x;
  float m_y;
};

/* 53 */
struct C_SDK::Classes::Math::Vector::Aligned
{
  float m_x;
  float m_y;
  float m_z;
  float m_w;
};

/* 54 */
struct C_SDK::Classes::Weapon::TEFireBullets
{
  _BYTE gap0[12];
  _DWORD m_player;
  _WORD m_unk;
  C_SDK::Classes::Math::Vector::Rectangular m_origin;
  C_SDK::Classes::Math::Vector::Rectangular m_angles;
  _DWORD m_weaponID;
  _DWORD m_mode;
  float float38;
  float m_seed;
  float dword40;
  _DWORD dword44;
};

/* 55 */
struct __declspec(align(1)) C_SDK::Classes::Engine::ConVar
{
  _DWORD pad00;
  C_SDK::Classes::Engine::ConVar *m_next;
  int m_isRegistered;
  char *m_pszName;
  char *m_pszHelpString;
  int m_flags;
  _DWORD pad18;
  C_SDK::Classes::Engine::ConVar *m_parent;
  char *m_pszDefaultValue;
  char *m_strString;
  int m_stringLength;
  float m_floatVal;
  int m_intVal;
  int m_hasMin;
  float m_minVal;
  int m_hasMax;
  float m_maxVal;
  void *m_changeCallback;
};

/* 56 */
typedef void *(__cdecl *C_SDK::Functions::Engine::CreateClientClass)(int entity, int serial);

/* 57 */
struct __declspec(align(4)) C_SDK::Classes::Engine::ClientClass
{
  C_SDK::Functions::Engine::CreateClientClass m_createClient;
  void *m_createEvent;
  char *m_networkName;
  void *m_recvTable;
  C_SDK::Classes::Engine::ClientClass *m_next;
  int m_classID;
};

/* 58 */
struct C_SDK::Classes::Engine::BaseClient::VirtualTable
{
  void *pad00;
  void *pad01;
  void *pad02;
  void *pad03;
  void *pad04;
  void *pad05;
  void *pad06;
  void *pad07;
  C_SDK::Classes::Engine::ClientClass *(__stdcall *C_SDK::Functions::Engine::ClientClass::GetClientClass)();
};

/* 59 */
struct C_SDK::Classes::Engine::BaseClient
{
  C_SDK::Classes::Engine::BaseClient::VirtualTable *m_virTable;
};

/* 60 */
struct __declspec(align(4)) OneTap::Classes::AnimationSystem::PlayerAnimationData
{
  BYTE m_flags[8];
  _DWORD m_lowerBodyYaw;
  C_SDK::Classes::Math::Vector::Rectangular m_angles;
  float float18;
  _BYTE gap1C[4];
  _DWORD m_qualityStatus;
  _BYTE m_flagsCount;
  char gap25[11];
  float m_duckAmount;
  float m_feetCycle;
  float m_feetWeight;
  _BYTE gap3C[12];
  _DWORD dword48;
  _DWORD dword4C;
  _DWORD dword50;
  _BYTE gap54[12];
  void *m_entity;
};

/* 62 */
struct __unaligned __declspec(align(1)) OneTap::Classes::AnimationData
{
  _BYTE gap0[8];
  _DWORD m_lag;
  _BYTE gapC[4];
  float float10;
  _BYTE byte14;
  _BYTE gap15[3];
  float float18;
  _BYTE gap1C[4];
  _DWORD dword20;
  _BYTE byte24;
  _BYTE gap25[15];
  _DWORD m_eyeAngles_x;
  float m_eyeAngles_y;
  _BYTE gap3C[12];
  _DWORD dword48;
  _DWORD dword4C;
  _DWORD dword50;
  _BYTE gap54[12];
  char char60;
};

/* 67 */
struct __unaligned __declspec(align(1)) OneTap::Classes::Player::AnimLagData
{
  _BYTE m_leftDormancy;
  _BYTE gap1[7];
  _DWORD lag;
  _BYTE gapC[4];
  float yaw;
  _BYTE byte14;
  _BYTE gap15[3];
  float float18;
  _BYTE gap1C[4];
  _DWORD m_duckAmount;
  _BYTE m_flags;
  _BYTE gap25[15];
  _DWORD m_eyeAngles_x;
  float m_eyeAngles_y;
  _BYTE gap3C[12];
  _DWORD dword48;
  _DWORD dword4C;
  _DWORD dword50;
  _BYTE gap54[12];
  char m_data;
};

/* 68 */
enum C_SDK::Engine::IClientMode::FSN
{
  C_SDK::Engine::IClientMode::FSN::FRAME_START = 0x0,
  C_SDK::Engine::IClientMode::FSN::FRAME_NET_UPDATE_START = 0x1,
  C_SDK::Engine::IClientMode::FSN::FRAME_NET_UPDATE_POSTDATAUPDATE_START = 0x2,
  C_SDK::Engine::IClientMode::FSN::FRAME_NET_UPDATE_POSTDATAUPDATE_END = 0x3,
  C_SDK::Engine::IClientMode::FSN::FRAME_NET_UPDATE_END = 0x4,
  C_SDK::Engine::IClientMode::FSN::FRAME_RENDER_START = 0x5,
  C_SDK::Engine::IClientMode::FSN::FRAME_RENDER_END = 0x6,
  C_SDK::Engine::IClientMode::FSN::FRAME_UNDEFINED = 0xFFFFFFFF,
};

/* 69 */
struct C_SDK::Classes::ClockDriftMgr
{
  float m_clockOffsets[16];
  int m_curClockOffset;
  int m_serverTick;
  int m_clientTick;
};

/* 70 */
struct C_SDK::Classes::ClientState
{
  char pad_0000[156];
  unsigned int m_netChannel;
  unsigned int m_challengeNr;
  char pad_00A4[100];
  unsigned int m_signonState;
  char pad_010C[8];
  float m_nextCmdTime;
  unsigned int m_serverCount;
  unsigned int m_currentSequence;
  char pad_0120[8];
  C_SDK::Classes::ClockDriftMgr m_clockDriftMgr;
  unsigned int m_deltaTick;
  bool m_isPaused;
  char pad_017D[3];
  unsigned int m_viewEntity;
  unsigned int m_playerSlot;
  char m_levelName[260];
  char m_levelNameShort[40];
  char m_groupName[40];
  char pad_02DC[56];
  unsigned int m_maxClients;
  char pad_0314[18940];
  C_SDK::Classes::Math::Vector::Rectangular m_viewAngles;
  int m_unk;
  int m_unk2;
  unsigned int m_lastOutGoingCommand;
  unsigned int m_chokedCommands;
};

/* 72 */
typedef void *(__cdecl *C_SDK::Classes::ClientClass::CreateClientClass)(int index, int serialNum);

/* 73 */
struct __declspec(align(4)) C_SDK::Classes::ClientClass
{
  C_SDK::Classes::ClientClass::CreateClientClass m_create;
  void *m_createEvent;
  char *m_networkName;
  void *m_recvTable;
  C_SDK::Classes::ClientClass *m_next;
  int m_classID;
};

/* 75 */
typedef int (__cdecl *C_SDK::Classes::IBaseClientDll::Init)(void *appSystemFactory, void *globals);

/* 76 */
typedef void (__cdecl *C_SDK::Classes::IBaseClientDll::PostInit)();

/* 77 */
typedef void (*C_SDK::Classes::IBaseClientDll::Shutdown)(void);

/* 78 */
typedef void (__cdecl *C_SDK::Classes::IBaseClientDll::LevelInitPreEntity)(const char *mapName);

/* 79 */
typedef void (__cdecl *C_SDK::Classes::IBaseClientDll::LevelInitPostEntity)();

/* 80 */
typedef void (*C_SDK::Classes::IBaseClientDll::LevelShutdown)(void);

/* 81 */
typedef C_SDK::Classes::ClientClass *(*C_SDK::Classes::IBaseClientDll::GetAllClasses)(void);

/* 74 */
struct __declspec(align(4)) C_SDK::Classes::IBaseClientDll
{
  C_SDK::Classes::IBaseClientDll::Init m_init;
  C_SDK::Classes::IBaseClientDll::PostInit m_postInit;
  C_SDK::Classes::IBaseClientDll::Shutdown m_shutdown;
  C_SDK::Classes::IBaseClientDll::LevelInitPreEntity m_levelInitPreEntity;
  C_SDK::Classes::IBaseClientDll::LevelInitPostEntity m_levelInitPostEntity;
  C_SDK::Classes::IBaseClientDll::LevelShutdown m_levelShutdown;
  C_SDK::Classes::IBaseClientDll::GetAllClasses m_getAllClasses;
};

/* 82 */
enum C_SDK::Classes::Player::HitGroup
{
  C_SDK::Classes::Player::HitGroup::HEAD = 0x0,
  C_SDK::Classes::Player::HitGroup::CHEST = 0x1,
  C_SDK::Classes::Player::HitGroup::LEFT_ARM = 0x2,
  C_SDK::Classes::Player::HitGroup::RIGHT_ARM = 0x3,
  C_SDK::Classes::Player::HitGroup::STOMACH = 0x4,
  C_SDK::Classes::Player::HitGroup::LEFT_LEG = 0x5,
  C_SDK::Classes::Player::HitGroup::RIGHT_LEG = 0x6,
};

/* 84 */
struct __declspec(align(4)) OneTap::SharedData::ClientSnapshot
{
  int HlClient;
  char pad_0001[12];
  int UnkData2;
  char pad_0002[12];
  int *LocalPlayer;
  char pad_0003[12];
  C_SDK::Classes::ICVar *ICVar;
  char pad_0004[12];
  C_SDK::Classes::EngineClient *EngineClient;
  char pad_0005[12];
  C_SDK::Classes::EngineTrace *EngineTrace;
  char pad_0006[12];
  C_SDK::Classes::CGlobalVarsBase *GlobalVars;
  char pad_0007[12];
  int UnkData5;
  char pad_0008[12];
  int ISurface;
  char pad_0009[12];
  int UnkData6;
  char pad_0010[12];
  int UnkData7;
  char pad_0011[12];
  int UnkData8;
  char pad_0012[12];
  C_SDK::Classes::CPrediction *Prediction;
  char pad_0013[12];
  int UnkData9;
  char pad_0014[12];
  int IDirect3DDevice9;
  char pad_0015[12];
  int UnkData11;
  char pad_00016[12];
  int PhysicsSurfaceProps;
  char pad_0017[12];
  C_SDK::Classes::ClientState *ClientState;
  char pad_0018[12];
};

/* 117 */
struct __declspec(align(4)) C_SDK::Classes::ICVar
{
  C_SDK::Classes::ICVar *Interfaces;
  void (__stdcall *Disconnect)();
  void *(__stdcall *QueryInterface)(const char *interface);
  int (__stdcall *Init)();
  void (__stdcall *Shutdown)();
  void *(__stdcall *GetDependencies)();
  int (__stdcall *GetTier)();
  void (__stdcall *Reconnect)(void *factory, const char *interface);
  void (__stdcall *UnkFunc)();
  int (__stdcall *AllocateDLLIdentifier)();
  void (__stdcall *RegisterConCommand)(void *base);
  void (__stdcall *UnregisterConCommand)(void *base);
  void (__stdcall *UnregisterConCommands)(int id);
  char *(__stdcall *GetCommandLineValue)(const char *variable);
  void *(__stdcall *FindCommandBase)(const char *name);
  void *(__stdcall *FindCommandBase2)(const char *name);
  C_SDK::Classes::Engine::ConVar *(__stdcall *FindVar)(const char *var);
  C_SDK::Classes::Engine::ConVar *(__stdcall *FindVar2)(const char *var);
  void *(__stdcall *FindCommand)(const char *name);
  void *(__stdcall *FindCommand2)(const char *name);
  void (__stdcall *InstallGlobalChangeCallback)(void *callback);
  void (__stdcall *RemoveGlobalChangeCallback)(void *callback);
  void (__stdcall *CallGlobalChangeCallbacks)(C_SDK::Classes::Engine::ConVar *var, const char *name, float id);
  void (__stdcall *InstallConsoleDisplayFunc)(void *display);
  void (__stdcall *RemoveConsoleDisplayFunc)(void *display);
  void (*ConsoleColorPrintf)(void *color, const char *format, ...);
  void (*ConsolePrintf)(const char *format, ...);
  void (*ConsoleDPrintf)(const char *format, ...);
  void (__stdcall *RevertFlaggedConVars)(int flag);
};

/* 97 */
struct C_SDK::Classes::EngineClient
{
  C_SDK::Classes::EngineClient::VirtTable *m_vtable;
};

/* 91 */
struct C_SDK::Classes::EngineTrace
{
  C_SDK::Classes::EngineTrace::VirtTable *m_vtable;
};

/* 95 */
struct C_SDK::Classes::EngineClient::VirtTable
{
  int pad00;
  int pad01;
  int pad02;
  int pad03;
  int pad04;
  void (__stdcall *GetScreenSize)(int *, int *);
  int pad06;
  void (__stdcall *GetClientCmd)(const char *);
  bool (__stdcall *GetPlayerInfo)(int, C_SDK::Classes::Player::Info *);
  int (__stdcall *GetPlayerForUserID)(int);
  int pad10;
  int pad11;
  int (__stdcall *GetLocalPlayer)();
  int pad13;
  int pad14;
  int pad15;
  int pad16;
  int pad17;
  void (__stdcall *GetViewAngles)(C_SDK::Classes::Math::Vector::Rectangular *);
  void (__stdcall *SetViewAngles)(C_SDK::Classes::Math::Vector::Rectangular *);
  int (__stdcall *GetMaxClients)();
  int pad21;
  int pad22;
  int pad23;
  int pad24;
  int pad25;
  bool (__stdcall *IsInGame)();
  int pad27;
  int pad28;
  int pad29;
  int pad30;
  int pad31;
  int pad32;
  int pad33;
  int pad34;
  int pad35;
  int pad36;
  C_SDK::Classes::Math::VirtualMatrix *(__stdcall *WorldToScreenMatrix)();
  int pad38;
  int pad39;
  int pad40;
  int pad41;
  int pad42;
  int pad43;
  int pad44;
  int pad45;
  int pad46;
  int pad47;
  int pad48;
  int pad49;
  int pad50;
  int pad51;
  int pad52;
  int pad53;
  int pad54;
  int pad55;
  int pad56;
  int pad57;
  int pad58;
  int pad59;
  int pad60;
  int pad61;
  int pad62;
  int pad63;
  int pad64;
  int pad65;
  int pad66;
  int pad67;
  int pad68;
  int pad69;
  int pad70;
  int pad71;
  int pad72;
  int pad73;
  int pad74;
  int pad75;
  int pad76;
  int pad77;
  C_SDK::Classes::INetChannelInfo *(__stdcall *GetNetChannelInfo)();
  int pad79;
  int pad80;
};

/* 90 */
struct C_SDK::Classes::EngineTrace::VirtTable
{
  int (__stdcall *GetPointContents)(C_SDK::Classes::Math::Vector::Rectangular *absPosition, int contentsMask, void ***entity);
  int pad01;
  int pad02;
  void (__stdcall *ClipRayToEntity)(C_SDK::Classes::EngineTrace::Ray *, unsigned int, void *, C_SDK::Classes::EngineTrace::Trace *);
  int pad04;
  void (__stdcall *TraceRay)(C_SDK::Classes::EngineTrace::Ray *ray, unsigned int mask, void *traceFilter, C_SDK::Classes::EngineTrace::Trace *trace);
};

/* 96 */
struct C_SDK::Classes::Player::Info
{
  char pad00[8];
  int m_xuidLow;
  int m_xuidHigh;
  char m_name[128];
  int m_userID;
  char m_guid[33];
  char pad02[163];
};

/* 92 */
struct C_SDK::Classes::Math::VirtualMatrix
{
  float m_matrix[4][4];
};

/* 94 */
struct C_SDK::Classes::INetChannelInfo
{
  C_SDK::Classes::INetChannelInfo::VirtTable *m_vtable;
};

/* 86 */
struct __declspec(align(1)) C_SDK::Classes::EngineTrace::Ray
{
  C_SDK::Classes::Math::Vector::Aligned m_start;
  C_SDK::Classes::Math::Vector::Aligned m_delta;
  C_SDK::Classes::Math::Vector::Aligned m_startOffset;
  C_SDK::Classes::Math::Vector::Aligned m_extents;
  const C_SDK::Classes::Math::Matrix3x4 *m_worldAxisTransform;
  bool m_isRay;
  bool m_isSwept;
};

/* 89 */
struct __declspec(align(1)) C_SDK::Classes::Engine::CPlane
{
  C_SDK::Classes::Math::Vector::Rectangular m_normal;
  float m_distance;
  unsigned __int8 m_type;
  unsigned __int8 m_signBits;
  unsigned __int8 pad[2];
};

/* 87 */
struct __declspec(align(1)) C_SDK::Classes::Engine::CSurface
{
  const char *m_name;
  __int16 m_surfaceProps;
  unsigned __int16 m_flags;
};

/* 88 */
struct __declspec(align(1)) C_SDK::Classes::EngineTrace::Trace
{
  C_SDK::Classes::Math::Vector::Rectangular m_start;
  C_SDK::Classes::Math::Vector::Rectangular m_endPos;
  C_SDK::Classes::Engine::CPlane m_plane;
  float m_fraction;
  int m_contents;
  _BYTE m_dispFlags[2];
  _BYTE m_allSolid;
  _BYTE m_startSolid;
  float m_fractionLeftSolid;
  C_SDK::Classes::Engine::CSurface m_surface;
  int m_hitGroup;
  __int16 m_physicsBone;
  _BYTE m_worldSurfaceIndex[2];
  void *m_entity;
  int m_hitBox;
};

/* 93 */
struct __declspec(align(4)) C_SDK::Classes::INetChannelInfo::VirtTable
{
  const char *(__stdcall *GetName)();
  const char *(__stdcall *GetAddress)();
  float (__stdcall *GetTime)();
  float (__stdcall *GetTimeConnected)();
  int (__stdcall *GetBufferSize)();
  int (__stdcall *GetDataRate)();
  bool (__stdcall *IsLoopback)();
  bool (__stdcall *IsTimingOut)();
  bool (__stdcall *IsPlayback)();
  float (__stdcall *GetLatency)(int flow);
  float (__stdcall *GetAvgLatency)(int flow);
  float (__stdcall *GetAvgLoss)(int flow);
  float (__stdcall *GetAvgChoke)(int flow);
  float (__stdcall *GetAvgData)(int flow);
  float (__stdcall *GetAvgPackets)(int flow);
  int (__stdcall *GetTotalData)(int flow);
  int (__stdcall *GetTotalPackets)(int flow);
  int (__stdcall *GetSequenceNr)(int flow);
  bool (__stdcall *IsValidPacket)(int flow, int frameNumber);
  float (__stdcall *GetPacketTime)(int flow, int frameNumber);
  int (__stdcall *GetPacketBytes)(int flow, int frameNumber, int group);
  bool (__stdcall *GetStreamProgress)(int flow, int *received, int *total);
  float (__stdcall *GetTimeSinceLastReceived)();
  float (__stdcall *GetCommandInterpolationAmount)(int flow, int frameNumber);
  void (__stdcall *GetPacketResponseLatency)(int flow, int frameNumber, int *latencyMsecs, int *choke);
  void (__stdcall *GetRemoteFramerate)(float *frameTime, float *frameTimeStdDeviation, float *frameStartTimeStdDeviation);
  float (__stdcall *GetTimeoutSeconds)();
};

/* 85 */
struct C_SDK::Classes::Math::Matrix3x4
{
  float m_matVal[3][4];
};

/* 98 */
struct C_SDK::Classes::Engine::Surface::SoundNames
{
  unsigned __int16 m_stepLeft;
  unsigned __int16 m_stepRight;
  unsigned __int16 m_impactSoft;
  unsigned __int16 m_impactHard;
  unsigned __int16 m_scrapeSmooth;
  unsigned __int16 m_scrapeRough;
  unsigned __int16 m_bulletImpact;
  unsigned __int16 m_rolling;
  unsigned __int16 m_breakSound;
  unsigned __int16 m_strainSound;
};

/* 99 */
struct C_SDK::Classes::Engine::Surface::PhysicsParams
{
  float m_friction;
  float m_elasticity;
  float m_density;
  float m_thickness;
  float m_dampening;
  char pad00[4];
};

/* 100 */
struct __declspec(align(4)) C_SDK::Classes::Engine::Surface::GameProps
{
  char pad00[4];
  float m_maxSpeedFactor;
  float m_jumpFactor;
  char pad01[4];
  float m_penetrationModifier;
  float m_damageModifier;
  unsigned __int16 m_material;
  char pad02[3];
};

/* 101 */
struct C_SDK::Classes::Engine::Surface::AudioParams
{
  char pad00[4];
  float m_reflectivity;
  float m_hardnessFactor;
  float m_roughnessFactor;
  float m_roughThreshold;
  float m_hardThreshold;
  float m_hardVelocityThreshold;
};

/* 102 */
struct __declspec(align(4)) C_SDK::Classes::Engine::Surface::Data
{
  C_SDK::Classes::Engine::Surface::PhysicsParams m_physics;
  C_SDK::Classes::Engine::Surface::AudioParams m_audio;
  C_SDK::Classes::Engine::Surface::SoundNames m_sound;
  C_SDK::Classes::Engine::Surface::GameProps m_game;
  char pad00[4];
};

/* 104 */
struct OneTap::Classes::HookManager::Data
{
  __int16 m_isHooked;
  __int16 m_unkData;
  void *m_functionToHook;
  void *m_hookProxy;
  void *m_originalFunctionPointer;
};

/* 108 */
struct C_SDK::Engine::Surface::PanRenderableInfo
{
  void *m_renderable;
  void *m_alphaProperty;
  int m_enumCount;
  int m_renderFrame;
  unsigned __int16 m_firstShadow;
  unsigned __int16 m_leafList;
  __int16 m_area;
  __int16 m_flags;
  __int16 m_flags2;
  C_SDK::Classes::Math::Vector::Rectangular m_bloatedAbsMins;
  C_SDK::Classes::Math::Vector::Rectangular m_bloatedAbsMaxs;
  C_SDK::Classes::Math::Vector::Rectangular m_absMins;
  C_SDK::Classes::Math::Vector::Rectangular m_absMaxs;
  int pad;
};

/* 112 */
enum C_SDK::Classes::CBaseAnimation::Layers
{
  C_SDK::Classes::CBaseAnimation::Layers::AIMMATRIX = 0x0,
  C_SDK::Classes::CBaseAnimation::Layers::WEAPON_ACTION = 0x1,
  C_SDK::Classes::CBaseAnimation::Layers::WEAPON_ACTION_RECROUCH = 0x2,
  C_SDK::Classes::CBaseAnimation::Layers::ADJUST = 0x3,
  C_SDK::Classes::CBaseAnimation::Layers::MOVEMENT_JUMP_OR_FALL = 0x4,
  C_SDK::Classes::CBaseAnimation::Layers::MOVEMENT_LAND_OR_CLIMB = 0x5,
  C_SDK::Classes::CBaseAnimation::Layers::MOVEMENT_MOVE = 0x6,
  C_SDK::Classes::CBaseAnimation::Layers::MOVEMENT_STRAFECHANGE = 0x7,
  C_SDK::Classes::CBaseAnimation::Layers::WHOLE_BODY = 0x8,
  C_SDK::Classes::CBaseAnimation::Layers::FLASHED = 0x9,
  C_SDK::Classes::CBaseAnimation::Layers::FLINCH = 0xA,
  C_SDK::Classes::CBaseAnimation::Layers::ALIVELOOP = 0xB,
  C_SDK::Classes::CBaseAnimation::Layers::LEAN = 0xC,
  C_SDK::Classes::CBaseAnimation::Layers::COUNT = 0xD,
};

/* 114 */
struct C_SDK::Classes::DataMap::DataMapT
{
  void *m_dataDescriptor;
  int m_dataFiels;
  const char *m_dataClassName;
  C_SDK::Classes::DataMap::DataMapT *m_baseMap;
  bool m_chainsValidated;
  bool m_packedOffsetsComputed;
  int m_packetSize;
};

/* 115 */
struct C_SDK::Classes::CAnimationLayer::Client
{
  char pad_0000[20];
  int m_order;
  int m_sequence;
  float m_prevCycle;
  float m_weight;
  float m_weightDeltaRate;
  float m_playbackRate;
  float m_cycle;
  void *m_owner;
  char pad_0038[4];
};

/* 116 */
struct __declspec(align(4)) OneTap::SharedData::ClientHooks
{
  int (__stdcall *Undefined_43F46A20)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__thiscall *Undefined_43F46A24)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int pad;
  int (__fastcall *Undefined_43F46A2C)(_DWORD, _DWORD);
  int (__fastcall *Undefined_43F46A30)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__stdcall *Undefined_43F46A34)(_DWORD);
  int (__stdcall *Undefined_43F46A38)(_DWORD);
  int (__stdcall *Undefined_43F46A3C)(_DWORD);
  int (__fastcall *Undefined_43F46A40)(_DWORD, _DWORD, _DWORD, _DWORD);
  int (__thiscall *DrawModelExecute)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__fastcall *Undefined_43F46A48)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int pad1;
  int (*Undefined_43F46A50)(void);
  int (__fastcall *FrameStageNotify)(_DWORD, _DWORD, _DWORD);
  int (*Undefined_43F46A58)(void);
  int (*Undefined_43F46A5C)(void);
  int (__fastcall *GetLocalViewAngles)(_DWORD, _DWORD, _DWORD);
  int (__cdecl *GetViewmodelFov)(_DWORD);
  int pad2;
  int (__fastcall *RunCommandPredict)(_DWORD, _DWORD);
  int (__stdcall *Undefined_43F46A70)(_DWORD, _DWORD);
  int (*Undefined_43F46A74)(void);
  int (*Undefined_43F46A78)(void);
  int (__fastcall *Undefined_43F46A7C)(_DWORD, _DWORD);
  int (*Undefined_43F46A80)(void);
  int (__fastcall *ListLeavesInBox)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__stdcall *Undefined_43F46A88)(_DWORD);
  int (__fastcall *Undefined_43F46A8C)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__fastcall *Undefined_43F46A90)(_DWORD, _DWORD);
  int (*Undefined_43F46A94)(void);
  int (__stdcall *Undefined_43F46A98)(_DWORD, _DWORD, _DWORD, _DWORD);
  int (__fastcall *Undefined_43F46A9C)(_DWORD, _DWORD);
  int (__stdcall *Undefined_43F46AA0)(_DWORD);
  int (__fastcall *LockCursor)(_DWORD, _DWORD);
  int (__stdcall *Undefined_43F46AA8)();
  int (__fastcall *Undefined_43F46AAC)(DWORD, _DWORD, _DWORD);
  int (__stdcall *Undefined_4F46AB0)(_DWORD, _DWORD);
  int (*OnScreenSizeChanged)(void);
  int (__stdcall *Undefined_43F46AB8)(_DWORD, _DWORD);
  int (__fastcall *Undefined_43F46ABC)(_DWORD, _DWORD, _DWORD, _DWORD);
  int (__fastcall *OverrideView)(_DWORD, _DWORD, _DWORD);
  int (__fastcall *Undefined_43F46AC4)(_DWORD, _DWORD, _DWORD);
  int (__fastcall *Undefined_43F46AC8)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__fastcall *Undefined_43F46ACC)(_DWORD, _DWORD, _DWORD);
  int (__stdcall *BeginScene)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int pad3;
  int (__stdcall *Undefined_43F46AD8)(_DWORD, _DWORD);
  int (__fastcall *RunCommand)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__cdecl *EndScene)();
  int (__fastcall *Undefined_43F46AE4)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__fastcall *BoneSetup)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (*Undefined_43F46AEC)(void);
  int (__stdcall *Undefined_43F46AF0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__fastcall *Undefined_43F46AF4)(_DWORD, _DWORD);
  int (__cdecl *Undefined_43F46AF8)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__cdecl *Undefined_43F46AFC)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__stdcall *WndProc)(_DWORD, _DWORD, _DWORD, _DWORD);
  int (__fastcall *WriteUserCmdDeltaToBuffer)(C_SDK::Classes::IBaseClientDll *ecx, int edx, int slot, int bufferWrite, int from, int to, bool isNewCmd);
};

